*goldsmith.txt* Go development plugin for Neovim
*goldsmith*
>
                    __    __               _ __  __  
       ____ _____  / /___/ /________ ___  (_) /_/ /_ 
      / __ `/ __ \/ / __  / ___/ __ `__ \/ / __/ __ \
     / /_/ / /_/ / / /_/ (__  ) / / / / / / /_/ / / /
     \__, /\____/_/\__,_/____/_/ /_/ /_/_/\__/_/ /_/ 
    /____/

CONTENTS                                                    *goldsmith-contents*

  0. Intro........................................|goldsmith-intro|
  1. Requirements.................................|goldsmith-requirements|
  2. Features.....................................|goldsmith-features|
  3. Supported Plugins............................|goldsmith-supported-plugins|
  4. Configuration................................|goldsmith-configuration|
  5. Settings.....................................|goldsmith-settings|
  6. Commands.....................................|goldsmith-commands|
  7. Testing and Benchmarking.....................|goldsmith-testing-and-benchmarking|
  8. Mappings.....................................|goldsmith-mappings|
  9. Status.......................................|goldsmith-status|
 10. Text Objects.................................|goldsmith-text-objects|
 11. Functions....................................|goldsmith-functions|
 12. Telescope Integration........................|goldsmith-telescope|
 13. Health Check.................................|goldsmith-healthcheck|
 14. Help.........................................|goldsmith-help|
 15. Resources....................................|goldsmith-resources|

================================================================================
INTRO                                                          *goldsmith-intro*

Goldsmith provides a Go development environment for Neovim using native Neovim 
features and Neovim plugins, where possible.

One goal is to support as many best-in-class plugins as possible. Support will 
include optional auto-configuration of these plugins to provide reasonable 
defaults for Go development.

Another goal is to take advantage of the many new features of Neovim 0.5.0.
Primarily this includes the built-in Language Server Protocol (LSP) client, 
and the integration of Tree-sitter.

================================================================================
REQUIREMENTS                                            *goldsmith-requirements*

Goldsmith requires at least Neovim 0.5.0. You can run `nvim --version` to see
what version of Neovim you have.

It also requires some plugins. See the |goldsmith-supported-plugins| section 
for more information about that.

You can run `:checkhealth goldsmith` to see if you meet all the requirements and
to see if you have anything missing. See |goldsmith-healthcheck| and 
|goldsmith-supported-plugins| for more information.

Many of the automated features of Goldsmith utilize the |CursorHold| and 
|CursorHoldI| events. Neovim currently has a bug relating to these events. See: 
https://github.com/neovim/neovim/issues/12587
To work around this issue you may need to install the FixCursorHold plugin.
This plugin can be found at https://github.com/antoinemadec/FixCursorHold.nvim

MINIMAL VERSIONS                                    *goldsmith-minimal-versions*

The following are the minimal versions known to work with Goldsmith. It does not
mean that older versions will not work, but it is unknown if they will.

Not every tool reports a version. If you install everything with 
|:GoInstallBinaries| it is expected that Goldsmith will work fine as long as 
your Go installation meets the minimum version requirement. You can check
the version of all tools using |goldsmith-healthcheck|.

Tool                      Version
---------------------------------
go                         1.14
gofumpt                    0.1.1
golangci-lint              1.40.0
golines                    0.4.0
gopls                      0.6.6
staticcheck                0.2.0

================================================================================
FEATURES                                                    *goldsmith-features*

Features currently included:
* codelens support
* flag and update out-of-date dependencies in your current Go module
* automatically run goimports on save
* auto-highlight the current symbol under the cursor throughout the current buffer
* treesitter navigation utilizing the nvim-treesitter-textobjects plugin
* treesitter text objects utilizing the nvim-treesitter-textobjects plugin
* convert JSON to Go structs directly in your code, or paste from outside the 
  editor
* view Go documentation using the :GoDoc command and Go help with :GoHelp
* manually update imports using the :GoImports command
* use :checkhealth to see if your Goldsmith setup should work correctly
* format your code on demand using :GoFormat or have Goldsmith automatically 
  format your code on save
* integration with Telescope for a number of file picking needs
* run extra linters and/or formatters using null-ls: currently has support for 
  golines, gofmt, gofumpt, revive, golangci-lint, and staticcheck
* see the source of the diagnostic when running extra linters
* Goldsmith can completely configure everything for you, if you want
* generate test stubs automatically using `gotests`
* create implementation stubs for your interfaces using :GoImpl
* :GoFillStruct utilizes LSP to fill the current struct
* switch to the "alternate" file quickly using :GoAlt
* struct tag editing: add / remove / update struct tags and options
* use common go subcommands from within Neovim with: :GoBuild, :GoInstall, :GoGet, 
  :GoRun, and others
* coverage support: annotate the current buffer and store coverage data for all 
  files affected
* statusline integration: see the status of running jobs and of coverage data for 
  the current buffer
* edit the go.mod file from within Neovim with: :GoModTidy, :GoModCheck, 
  :GoModRetract, :GoModReplace, and others
* use the excellent builtin testing framework to run individual tests, package 
  tests, or all your tests
* all the great Neovim LSP functions are available as Vim commands
* most commands are completely asynchronous
* support for lspinstall and nvim-lsp-installer

================================================================================
SUPPORTED PLUGINS                                  *goldsmith-supported-plugins*

A list of plugins that are either required or optional, but all are supported
in some way by Goldsmith. See the |goldsmith-resources| section below for links
to each plugin mentioned.

You may also want to look at |goldsmith-healthcheck| and review the output. There
may be more plugins than are listed here.

Required
* nvim-lspconfig Configure gopls and null-ls
* nvim-treesitter
  For syntax highlighting, folding, and indentation
* FixCursorHold
  Currently required to fix a bug with Neovim and the CursorHold event

Optional
* nvim-treesitter-textobjects
  Needed if you want treesitter textobjects and treesitter navigation. See
  |goldsmith-text-objects|.
* nvim-lspinstall
  For installing language servers. i.e. gopls
* nvim-lsp-installer
  For installing language servers. i.e. gopls
* null-ls
  For running extra linters and formatters

================================================================================
CONFIGURATION                                          *goldsmith-configuration*

The following section explains how Goldsmith can be used to help configure your 
Go-related LSP servers. For more complete examples please see the wiki page on 
configuration:
https://github.com/WhoIsSethDaniel/goldsmith.nvim/wiki/Configurations

*goldsmith-using-lua*
Goldsmith is written in Lua and the configuration of Goldsmith uses Lua code. If 
you are using a Vim-style configuration you can wrap your Goldsmith configuration 
in a Lua here-doc:
>
    lua<<EOF
      require("goldsmith").config(
       ...
      )
    EOF
<
The above may be placed in your .vimrc, or similar, file.

*goldsmith-configuration-default*
Running config() is not required. If you do not run config() it is the same as
running config() with no arguments: all the defaults are chosen.

You can use all the defaults by placing the following in your configuration:
>
    require("goldsmith").config()
<
Assuming you do nothing else the above will cause Goldsmith to attempt to 
configure null-ls and gopls for you. This means that null-ls will attempt to run
its default services, and gopls will have a minimal configuration that looks
something like the following (this example is with `gopls` 0.7.1):
>
    capabilities = { ... }
    cmd = { "<discovered gopls executable>", "-remote=auto" },
    filetypes = { "go", "gomod" },
    flags = {
        debounce_text_changes = 500
    },
    root_dir = <function 1>,
    settings = {
        diagnosticsDelay = "500ms",
        experimentalPostfixCompletions = true,
        experimentalUseInvalidMetadata = true,
        gopls = {
            codelenses = {
                gc_details = true
            },
            gofumpt = true,
            staticcheck = true,
            usePlaceholders = true
        }
    }

*goldsmith-configuration-no-autoconfig*
You can turn off the auto-configuration of servers, e.g.:
>
    require("goldsmith").config({ autoconfig = false })
<
If you do not allow Goldsmith to help configure your servers there are certain 
features of Goldsmith that will not work. If you do not run `gopls` at all 
nearly all of Goldsmith will not work. It is recommended to use Goldsmith to 
help manage your servers.

*goldsmith-configuration-explicit*
You can explicitly configure servers by passing the configuration for each 
server to goldsmith.config():
>
    require("goldsmith").config({
        gopls = {
            config = function()
                return {
                    cmd = { 'gopls' },
                    settings = {
                        gopls = {
                            gofumpt = false,
                        },
                    },
                },
            end,
        },
        null = {
            config = {
                sources = { fmt.stylua, fmt.shfmt },
            },
        },
    })

    ...
<
The example above configures `gopls` using a combination of the provided
configuration plus configuration that Goldsmith provides. Any conflicts between
the provided configuration and Goldsmith's configuration are decided in favor of
the user's configuration.

You can pass the configuration either as a table or as a function. The example
above shows one of each. Using a function is a good way to delay the generation
of the configuration until as late as possible. If you have a very dynamic
configuration you should use a function.

If you are using Goldsmith to configure servers you should not use lspconfig to
configure those servers. Goldsmith will configure the servers and call lspconfig.

If you want null-ls to do non-Go things (such as in the example above where 
null-ls will run stylua and shfmt), and you want Goldsmith to configure null-ls
for Go-related things, you will need to pass the non-Go portion of your null-ls
configuration to Goldsmith.

*goldsmith-configuration-all-defaults*
A configuration that sets settings to the defaults (this example is not
guaranteed to be entirely up-to-date):
>
    require("goldsmith").config({
      codelens = {
        show = true
      },
      completion = {
        omni = false
      },
      format = {
        comments = {
          enabled = false,
          private = false,
          template = "....",
          test_files = false
        },
        goimports = true,
        goimports_timeout = 1000,
        max_line_length = 120,
        run_on_save = true
      },
      goalt = {
        use_current_window = false
      },
      gobuild = {
        use_makefile = true
      },
      godoc = {},
      goget = {},
      goinstall = {},
      ["golangci-lint"] = {},
      gopls = {
        options = { "-remote=auto" }
      },
      gorun = {},
      gotest = {},
      gotestvisit = {
        use_current_window = false
      },
      gotostruct = {
        fetch_register = "+",
        store_register = "*",
        struct_name = "Foo"
      },
      highlight = {
        current_symbol = true
      },
      jump = {
        use_current_window = true
      },
      mappings = {
        ["add-ws-folder"] = { "<leader>wa" },
        ["alt-file"] = {},
        ["alt-file-force"] = {},
        build = {},
        ["build-last"] = {},
        ["close-any"] = {},
        ["close-terminal"] = {},
        codeaction = { "<leader>ca" },
        ["codelens-off"] = {},
        ["codelens-on"] = {},
        ["codelens-run"] = {},
        coverage = {},
        ["coverage-browser"] = {},
        ["coverage-files"] = {},
        ["coverage-off"] = {},
        ["coverage-on"] = {},
        enabled = true,
        fillstruct = {},
        format = { "<leader>f" },
        godef = { "gd", "<C-]>" },
        goimplementation = { "gi" },
        goref = { "gr" },
        hover = { "K" },
        ["list-ws-folders"] = { "<leader>wl" },
        nextdiag = { "]d" },
        prevdiag = { "[d" },
        rename = { "<leader>rn" },
        ["rm-ws-folder"] = { "<leader>wr" },
        run = {},
        ["run-last"] = {},
        setloclist = { "<leader>q" },
        showdiag = { "<leader>e" },
        sighelp = { "<C-k>" },
        ["start-follow"] = { "F" },
        ["stop-follow"] = { "S" },
        ["super-close-any"] = {},
        ["sym-highlight"] = {},
        ["sym-highlight-off"] = {},
        ["sym-highlight-on"] = {},
        ["test-a-nearest"] = {},
        ["test-a-pkg"] = {},
        ["test-a-suite"] = {},
        ["test-b-nearest"] = {},
        ["test-b-pkg"] = {},
        ["test-b-suite"] = {},
        ["test-close-window"] = {},
        ["test-last"] = {},
        ["test-nearest"] = {},
        ["test-pkg"] = {},
        ["test-suite"] = {},
        ["test-visit"] = {},
        ["toggle-debug-console"] = {},
        tostruct = {},
        tostructreg = {},
        typedef = { "<leader>D" }
      },
      null = {
        enabled = true,
        gofmt = false,
        gofumpt = false,
        ["golangci-lint"] = false,
        golines = true,
        revive = true,
        staticcheck = false
      },
      revive = {},
      status = {
        max_length = 40
      },
      system = {
        debug = false,
        root_dir = { ".git", "go.mod", "go.work" }
      },
      tags = {
        default_tag = "json",
        skip_unexported = false,
        transform = "snakecase"
      },
      terminal = {
        focus = false,
        height = 20,
        pos = "right",
        width = 80
      },
      testing = {
        arguments = {},
        strategy = "display"
      },
      window = {
        focus = true,
        height = 20,
        pos = "right",
        width = 80
      }
    }
<
================================================================================
SETTINGS                                                    *goldsmith-settings*

SYSTEM                                               *goldsmith-system-settings*

`system.root_dir`                                    *goldsmith-system.root_dir*

Default: { '.git', 'go.mod', 'go.work' }
Determine the root directory of the current project. This uses a list of 
files/directories to search for. The search looks from the current file's 
directory down to root. If it does not find any of the files/directories it 
defaults to the directory for the current file.

`system.lsp_root_dir`                            *goldsmith-system.lsp_root_dir*

Default: nil
If set this is passed to lspconfig and used to determine the root of the current
project for each LSP server that Goldsmith manages. If it is not set then
|goldsmith-system.root_dir| is used for this purpose.

`system.debug`                                          *goldsmith-system.debug*

Default: false
Experts only, please. This is mostly intended as a way to help others debug 
problems as well as for Goldsmith developers to debug their code.

When set to true Goldsmith will log all activity to an initially hidden buffer.
To see the contents of the buffer you can use |:GoDebugConsole|.

The debug console will honor your |goldsmith-window-settings|.

See the documentation for |:GoDebugConsole| for more information.

MAPPINGS                                           *goldsmith-mappings-settings*

There are many mappings settings that you can use. See |goldsmith-mappings| for
details on each mapping setting and its default key mapping.

`mappings.enabled`                                  *goldsmith-mappings.enabled*

Default: tru
When set to true the default key mappings are used. When set to false no mapping
defaults are used, and the user is expected to define all desired mappings.

For more information about this setting and key mappings please see 
|goldsmith-mappings|.

FORMATTING                                       *goldsmith-formatting-settings*

`format.run_on_save`                              *goldsmith-format.run_on_save*

Default: true
When you save your current document formatting should be applied. 

This will apply all formatting that you have asked Goldsmith to perform. This may 
include: formatting the code, adding missing imports, removing un-needed imports,
shortening lines that are too long, and possibly other things.

`format.max_line_length`                      *goldsmith-format.max_line_length*

Default: 120
The max number of columns to allow for code lines. 

Behind the scenes this controls the configuration of `golines`.

See |goldsmith-resources| for where `golines` can be found.

To install `golines` you can use |:GoInstallBinaries|.

`format.comments.enabled`                    *goldsmith-format.comments.enabled*

Default: false
If set to true will add comments, like |:GoComments|, on save (assuming 
|goldsmith-format.run_on_save| is set to true).

See |:GoComments| for more information on commenting.

`format.comments.template`                  *goldsmith-format.comments.template*

Default: '....'
Template for commenting when using |:GoComments|. The template is the part of the
comment that comes after the name of the thing being documented.

See |:GoComments| for more information on commenting.

`format.comments.private`                    *goldsmith-format.comments.private*

Default: false
If set to true non-public types/functions that can be given a comment will be 
given a comment. By default only public types/functions will be given a comment.

See |:GoComments| for more information on commenting.

`format.comments.test_files`              *goldsmith-format.comments.test_files*

Default: false
If set to true will also comment test files and not just code files. This does not
affect |:GoComments|, only |:GoFormat| and formatting-on-save.

See |:GoComments| for more information on commenting.

`format.goimports`                                  *goldsmith-format.goimports*

Default: true
When set to true |:GoFormat| will request, from gopls, that the imports section of 
the code be organized and that any missing imports should be inserted. When false
|:GoFormat| will not do this. You can manually request this at any time using
|:GoImports|.

`format.goimports_timeout`                  *goldsmith-format.goimports_timeout*

Default: 1000
How long to wait for a response from gopls when requesting that it organizes the
txtimports in the current file. The units are milliseconds, so 1000 = 1 second.

ALTERNATE FILE                               *goldsmith-alternate-file-settings*

`goalt.use_current_window`                  *goldsmith-goalt.use_current_window*

Default: false
Set to "true" to use the current window when loading the alternate file. If 
"false" Goldsmith will create a new window based on your
|goldsmith-window-settings|.

TESTING                                             *goldsmith-testing-settings*

`testing.strategy`                                  *goldsmith-testing.strategy*

Default: display
This is used to set whether the test output should be displayed or if tests 
should always be run in the background. Valid strategies are: 'background' and
'display'. The latter shows the complete output of the test in a window. The 
former runs the tests in the background. Both strategies will bring up the
quickfix window if there are errors. The 'display' strategy honors your
|goldsmith-window-settings|. You can override the default window settings by
placing window settings within the 'testing' config key, e.g.:
>
    testing = {
      focus = false,
      pos = 'left'
    }
<
The above overrides the window defaults by turning off focus and placing the
window to the left of the screen.

See |goldsmith-testing| for much more information about testing in Goldsmith.

`testing.arguments`                                *goldsmith-testing.arguments*

Default: {}
Pass these arguments to "go test" whenever a :GoTest* command is run. This must be 
a table where each key is a valid argument for "go test". e.g.:
>
    testing = {
      arguments = { '-timeout=10s' }
    }
<
This will always pass '-timeout=10s' to "go test" for any :GoTest* command.

`testing.template`                                  *goldsmith-testing.template*

Default: nil
Specify custom test code templates.

See |goldsmith-testing| for much more information about testing in Goldsmith.

`testing.template_dir`                          *goldsmith-testing.template_dir*

Default: nil
Path to a directory containing custom test code templates.

See |goldsmith-testing| for much more information about testing in Goldsmith.

`testing.template_params_dir`            *goldsmith-testing.template_params_dir*

Default: nil
Read external parameters to template by json with file.

See |goldsmith-testing| for much more information about testing in Goldsmith.

`gotestvisit.use_current_window`      *goldsmith-gotestvisit.use_current_window*

Default: false
You can use |goldsmith-window-settings| within the "gotestvisit" key to modify 
how |:GoTestVisit| works. By default |:GoTestVisit| will create a new window. 
But, if you set gotestvisit.use_current_window to true, it will use the window
you are currently in.
e.g.:
>
    gotestvisit = {
      use_current_window = true,
      pos = 'left'
    }
<
The above instructs Goldsmith to use the current window when |:GoTestVisit| is
run. It also instructs Goldsmith to place the window on the left side of the
screen.

LINTING                                             *goldsmith-linting-settings*

`golangci-lint.config_file`                *goldsmith-golangci-lint.config_file*

Default: nil
The configuration file for `golangci-lint`. If golangci-lint has been configured 
to run, and you explicitly specify a config file, then that file is required to 
exist. Otherwise `golangci-lint` uses its normal means to find its configuration 
file.

See |goldsmith-resources| for where `golangci-lint` can be found.

To install `golangci-lint` you can use |:GoInstallBinaries|.

`revive.config_file`                              *goldsmith-revive.config_file*

Default: nil
The configuration file for `revive`. If this configuration variable is set to
anything other than nil it means the given configuration file must exist. To 
create the configuration file please see |:GoCreateConfigs|.

See |goldsmith-resources| for where `revive` can be found.

To install `revive` you can use |:GoInstallBinaries|.

COMPLETION                                                *goldsmith-completion*

`completion.omni`                                    *goldsmith-completion.omni*

Default: false
Setup the Neovim omnicomplete function ('omnifunc'). By default this is turned 
off as most people will want to setup an auto-completion plugin, such as 
nvim-compe (https://github.com/hrsh7th/nvim-compe), instead of using this.

This simply sets 'omnifunc' to |vim.lsp.omnifunc()|.

If you are unfamiliar with how completion works, by default, in Neovim you
should read |ins-completion|.

STATUSLINE                                                *goldsmith-statusline*

`status.max_length`                                *goldsmith-status.max_length*

Default: 40
The maximum length the Goldsmith statusline integration will use. The length is a
bit fuzzy so the maximum may be exceeded by a small amount.

JSON TO STRUCT                                        *goldsmith-json-to-struct*

`gotostruct.store_register`                *goldsmith-gotostruct.store_register*

Default: *
The register to write the generated Go struct to when using |:GoToStructReg|.

`gotostruct.fetch_register`                *goldsmith-gotostruct.fetch_register*

Default: +
The register to retrieve JSON from when no range or visual selection has been 
made when using |:GoToStruct| or |:GoToStructReg|.

`gotostruct.struct_name`                      *goldsmith-gotostruct.struct_name*

Default: Foo
The default name of the struct created when using |:GoToStruct| or 
|:GoToStructReg|. Both commands accept a different name as an argument.

LSP SERVERS                                              *goldsmith-lsp-servers*

`null.enabled`                                          *goldsmith-null.enabled*

Default: true
If this setting is set to "false" it means that no Go-related services will be run
by null-ls.

`null.revive`                                            *goldsmith-null.revive*

Default: true
If `revive` is configured to run it will use a configuration file only if you 
have specified one using |revive.config_file|. Otherwise it does not use a 
configuration file. If you have specified a configuration file that file must
exist in a location that revive will look for it, otherwise it will error. See 
|:GoCreateConfigs| for a way to create an initial configuration file.

You can pass extra arguments to `revive` by setting this variable to a list where
each element in the list is a valid argument to `revive`.

See |goldsmith-resources| for where `revive` can be found.

To install `revive` you can use |:GoInstallBinaries|.

`null.golangci-lint`                              *goldsmith-null.golangci-lint*

Default: false
If `golangci-lint` is configured to run it will use a configuration file if one
exists, but will happily run without one. If you have specified a configuration
file using |golangci-lint.config_file| this file must exist otherwise 
golangci-lint will error. See |:GoCreateConfigs| for a way to create an initial 
configuration file.

You can pass extra arguments to `golangci-lint` by setting this variable to a list 
where each element in the list is a valid argument to `golangci-lint`.

See |goldsmith-resources| for where `golangci-lint` can be found.

To install `golangci-lint` you can use |:GoInstallBinaries|.

`null.staticcheck`                                  *goldsmith-null.staticcheck*

Default: false
By default `staticcheck` does not run. `staticcheck` already runs as a service 
within `gopls` so having it also run as a separate linter seems redundant and it
is not recommended. 

You can pass extra arguments to `staticcheck` by setting this variable to a list 
where each element in the list is a valid argument to `staticcheck`.

See |goldsmith-resources| for where `staticcheck` can be found.

To install `staticcheck` you can use |:GoInstallBinaries|.

`null.golines`                                          *goldsmith-null.golines*

Default: true
By default `golines` is configured to run. It will determine at what point a 
line is too long by using |format.max_line_length|.

You can pass extra arguments to `golines` by setting this variable to a list 
where each element in the list is a valid argument to `golines`.

See |goldsmith-resources| for where `golines` can be found.

To install `golines` you can use |:GoInstallBinaries|.

`null.gofmt`                                              *goldsmith-null.gofmt*

Default: false
By default `gofmt` is not run by null-ls. Instead formatting is done by `gopls`. 
If you set this to "true" the `gopls` formatting will be turned off (except for
import organization) and null-ls will perform all formatting.

You can pass extra arguments to `gofmt` by setting this variable to a list 
where each element in the list is a valid argument to `gofmt`.

`gofmt` is installed as part of the Go distribution.

`null.gofumpt`                                          *goldsmith-null.gofumpt*

Default: false
By default `gofumpt` is not run by null-ls. Instead formatting is done by `gopls`. 
If you set this to "true" the `gopls` formatting will be turned off (except for
import organization) and null-ls will perform all formatting.

You can pass extra arguments to `gofumpt` by setting this variable to a list 
where each element in the list is a valid argument to `gofumpt`.

See |goldsmith-resources| for where `gofumpt` can be found.

To install `gofumpt` you can use |:GoInstallBinaries|.

`null.config`                                            *goldsmith-null.config*

Default: {}
Pass settings on to Goldsmith for null-ls. These settings would be just like what 
you'd pass to lspconfig. The value may be either a table or a function.

Much more on this setting is in |goldsmith-configuration| and at the wiki page:
https://github.com/WhoIsSethDaniel/goldsmith.nvim/wiki/Configurations

See |goldsmith-resources| for where `null-ls` can be found.

`gopls.options`                                        *goldsmith-gopls.options*

Default: { '-remote=auto' }
Pass options to the gopls server process when it starts. This must be a list
where each field is an option to pass to gopls. To pass no options to gopls set 
this option to an empty table.
>
    gopls = {
        options = { '-remote=auto', '-logfile=auto' }
    }
<
The example above preserves the default option(s) for gopls and adds an option
that turns on logging.

`gopls.config`                                          *goldsmith-gopls.config*

Default: {}
Pass settings on to Goldsmith for gopls. These settings would be just like what 
you'd pass to lspconfig. The value may be either a table or a function.

Much more on this setting is in |goldsmith-configuration| and at the wiki page:
https://github.com/WhoIsSethDaniel/goldsmith.nvim/wiki/Configurations

See |goldsmith-resources| for where `gopls` can be found.

To install `gopls` you can use |:GoInstallBinaries|.

JUMPING                                                *goldsmith-jump-settings*

`jump.use_current_window`                    *goldsmith-jump.use_current_window*

Default: true
You can use |goldsmith-window-settings| within the "jump" key to modify how code 
jumping works. By default jumping occurs within the current window. But, if you
set jump.use_current_window to false, jumping will occur in a separate window.
e.g.:
>
    jump = {
      use_current_window = false,
      pos = 'left'
    }
<
The above instructs Goldsmith to not use the current window when jumping. Instead
it should open a new window and that window should be on the left side of the
screen. Every jump will open a new window.

HIGHLIGHTING                                   *goldsmith-highlighting-settings*

`highlight.current_symbol`                  *goldsmith-highlight.current_symbol*

Default: true
Highlight the current symbol the cursor is over throughout the current document.

This setting can be changed from within Goldsmith by using |:GoSymHighlightOn|
and |:GoSymHighlightOff|.

CODE LENS                                         *goldsmith-code-lens-settings*

`codelens.show`                                        *goldsmith-codelens.show*

Default: true
Show `codelens` items from `gopls`. When this is turned on *and* you have 
configured `gopls` to show various codelenses you will see in-line, via virtual
text, various code lenses. You can then use |:GoCodeLensRun| on the line
where the codelens appears to see the results of that codelens.

For details on what codelenses are available see the codelenses section of:
https://github.com/golang/tools/blob/master/gopls/doc/settings.md#ui

This setting can be changed from within Goldsmith by using |:GoCodeLensOn|
and |:GoCodeLensOff|.

GO BUILD                                                    *goldsmith-go-build*

`gobuild.use_makefile`                          *goldsmith-gobuild.use_makefile*

Default: true
By default Goldsmith will use any makefile in your project root directory when
you use |:GoBuild|. If no makefile exists it will use `go build`. By setting
this to false it will instead always use `go build`.

TAG MANIPULATION                                    *goldsmith-tag-manipulation*

`tags.default_tag`                                  *goldsmith-tags.default_tag*

Default: json
When adding tags define what is the default tag if no tags are provided to 
|:GoAddTags|.

`tags.transform`                                      *goldsmith-tags.transform*

Default: snakecase
Apply the named transformation to the tag name. The available transformations are:
"snakecase", "camelcase", "lispcase", "pascalcase", and "keep".

`tags.skip_unexported`                          *goldsmith-tags.skip_unexported*

Default: false
When applying tags skip any fields that are unexported.

TERMINAL SETTINGS                                  *goldsmith-terminal-settings*

Terminal settings are used by commands that have output that is displayed in a
terminal window.  Commands that have such output are |:GoBuild|, |:GoRun|, 
|:GoGet|, and |:GoInstall| (and possibly others).

`terminal.pos`                                          *goldsmith-terminal.pos*

Default: right
Position the terminal window will be placed at when a command with output is run.
An example of a command with output is :GoBuild. Valid values are "top", 
"bottom", "left", "right".

This sets this setting globally. You can also set it per-command.

`terminal.focus`                                      *goldsmith-terminal.focus*

Default: false
Whether or not the terminal window will have focus when a command with output is
run. If the window has focus at the time the command is run then this option has 
no effect. An example of a command with terminal output is :GoBuild.

This sets this setting globally. You can also set it per-command.

`terminal.width`                                      *goldsmith-terminal.width*

Default: 80
When using a pos that requires a vertical split this value represents the width 
of the terminal.

This sets this setting globally. You can also set it per-command.

`terminal.height`                                    *goldsmith-terminal.height*

Default: 20
When using a pos that requires a horizontal split this value represents the 
height of the terminal.

This sets this setting globally. You can also set it per-command.

WINDOW SETTINGS                                      *goldsmith-window-settings*

Window settings are used by commands that create a new non-terminal window.
Commands that have such output are |:GoAlt|, and |:GoDoc| (and possibly others).

`window.pos`                                          *goldsmith-window.pos*

Default: right
Position the window will be placed at when a new window is created. Valid
values are "top", "bottom", "left", "right".

This sets this setting globally. You can also set it per-command.

`window.focus`                                      *goldsmith-window.focus*

Default: true
Whether or not the new window will have focus after it is created. If the window 
has focus at the time the command is run then this option has no effect.

This sets this setting globally. You can also set it per-command.

`window.width`                                      *goldsmith-window.width*

Default: 80
When using a pos that requires a vertical split this value represents the width 
of the window.

This sets this setting globally. You can also set it per-command.

`window.height`                                    *goldsmith-window.height*

Default: 20
When using a pos that requires a horizontal split this value represents the 
height of the window.

This sets this setting globally. You can also set it per-command.

PER-COMMAND SETTINGS                            *goldsmith-settings-per-command*

Some settings may be applied per-command. 

For all commands that have terminal output (e.g. :GoBuild, :GoRun, etc...) you 
can define terminal options that are specific to that command and override any
global terminal options. The same applies to commands that use a non-terminal
window (e.g. :GoDoc, :GoHelp, etc...)

For example, if you want :GoBuild's terminal window to have the focus as it runs, 
but otherwise want all terminal commands to run without focus:
>
    {
        window  = {
            focus = true
        },
        terminal = {
            focus = false
        },
        gobuild = {
            focus = true
        }
    }
<

================================================================================
COMMANDS                                                    *goldsmith-commands*

                                                                        *:GoDoc*
:GoDoc [options] package [func | var | const | type]

View the documentation for the given package. Takes the same arguments as
`go doc`. e.g.:
>
    :GoDoc -all fmt
<
Use tab-completion to see all available packages.

View the documentation for a particular function/constant/variable/type within
a particular package:
>
    :GoDoc io Read<tab>
<
Use tab-completion to see all available packages and then all available types/
functions/variables/constants within that package.

You can also use dot notation with the same result:
>
    :GoDoc io.Read<tab>
<
:GoDoc and :GoHelp share the same window. Settings for that window are controlled
via the godoc.* settings. See |goldsmith-settings-per-command| for more 
information.

                                                                        *:GoHelp*
:GoHelp topic

View the `go help` documentation for the given topic, e.g.:
>
    :GoHelp test
<
Use tab-completion to see all available topics.

:GoDoc and :GoHelp share the same window. Settings for that window are controlled
via the godoc.* settings. See |goldsmith-settings-per-command| for more 
information.

                                                                    *:GoImports*
:GoImports

Manually request that `gopls` arrange and fix the import section of your code.

                                                                      *:GoBuild*
:GoBuild[!] [args]

Run `go build` on the current working directory, or run `make`. It will use 
`make` if the project root directory contains a Makefile (or makefile). See
|goldsmith-gobuild.use_makefile| to change this behavior.

When running `go build` it takes the same arguments as `go build`. e.g.:
>
    :GoBuild -race
<
If no file/package arguments are passed to this command the package of the
current buffer will be inserted at the end of the command. e.g.:
>
    :GoBuild -n 
< 
will translate to:
>
    go build -n <current package>
<
If you place three dots in the command-line it is similar to two dashes except
it is now the current package and all below it. e.g.:
>
    :GoBuild -n ... -z
<
will translate to:
>
    go build -n <current package>/... -z
<
If you have a package or file in the command then no insertion of the current
package occurs.

The insertion of the current package only occurs if you are using `go build`.
This does not occur with `make`.

If you pass "!" the command will run in the background. No output will be shown.
Only the exit code of the job will be shown.

If errors are encountered during compilation, or if the running program panics,
the quickfix list will be opened with the details.

Command completion may be used to find the name of the package(s) to build.

                                                                  *:GoBuildLast*
:GoBuildLast [args]

Run the previous :GoBuild command and append any arguments.

                                                                        *:GoRun*
:GoRun[!] [args]

Takes the same arguments as `go run`. e.g., the following runs the package in 
the root of the project:
>
    :GoRun .
<
If no file/package arguments are passed to this command the package of the
current buffer will be inserted at the end of the command. e.g.:
>
    :GoRun -n 
< 
will translate to:
>
    go run -n <current package>
<
If you place two dashes in the command-line the current package will replace the
two dashes in the command line. Any arguments following the two dashes will be
inserted after the current package. e.g.:
>
    :GoRun -n -- -z
<
will translate to:
>
    go run -n <current package> -z
<
If you place three dots in the command-line it is similar to two dashes except
it is now the current package and all below it. e.g.:
>
    :GoRun -n ... -z
<
will translate to:
>
    go run -n <current package>/... -z
<
If you have a package or file in the command then no insertion of the current
package occurs.

If you pass "!" the command will run in the background. No output will be shown.
Only the exit code of the job will be shown.

If errors are encountered during compilation, or if the running program panics,
the quickfix list will be opened with the details.

Command completion may be used to find the name of the package to run.

                                                                    *:GoRunLast*
:GoRunLast [args]

Run the previous :GoRun command and append any arguments.

                                                                        *:GoGet*
:GoGet [packages]

Run `go get` to add new libraries to use. Takes the same arguments as
`go get`.

You can pass arguments that are complete URLs (i.e. with https://) and this
command will deal with that properly.

                                                                    *:GoInstall*
:GoInstall [tools]

Run `go install` to add new tools to use. Takes the same arguments as
`go install`.

You can pass arguments that are complete URLs (i.e. with https://) and this
command will deal with that properly.

                                                                     *:GoFormat*
:GoFormat

Tell gopls and null-ls to format the current Go buffer immediately. Depending on
how you have configured Goldsmith this may do any or all of: format the code, 
organize the imports, fill-in missing imports, shorten lines that are too long,
and possibly other things.

This command also will format go.mod files.

See |goldsmith-formatting-settings| for information on settings that apply to 
formatting.

                                                                   *:GoComments*
:GoComments

By default will find all public types/functions that do not currently have a
comment and will give them a stub comment (see the various formatting options
for how to adjust how this works, including changing the look of the comment and
commenting on non-public types/functions):
|goldsmith-format.comments.private|
|goldsmith-format.comments.template|

e.g., the following:
>
    func ExportedThing() {
      ...
    }
<
Will receive a comment that looks like the following (with the default settings):
>
    // ExportedThing ....
    func ExportedThing() {
      ...
    }
<
                                                                    *:GoAddTags*
:[range]GoAddTags [key[,option]] [key[,option]] ...

Add tags and options to structs. By default will be applied to the struct the
cursor is in at the time the command is run. It will also work on a visually
selected set of lines, or on a given range. e.g.
>
    :10,20GoAddTags 
<
will add the default tag (typically `json`, but see |tags.default_tag|)
to all struct fields from line 10 to line 20.
>
    :GoAddTags json,omitempty
< 
will add the `json` tag along with the `omitempty` option to all fields in the
current struct.

Behind the scenes this uses the `gomodifytags` tool. See |goldsmith-resources|
for where this tool can be found.

To install `gomodifytags` you can use |:GoInstallBinaries|.

                                                                 *:GoRemoveTags*
:[range]GoRemoveTags [key[,option]] [key[,option]] ...

Remove tags and options from structs. By default will be applied to the struct 
the cursor is in at the time the command is run. It will also work on a visually
selected set of lines, or on a given range. e.g.
>
    :10,20GoRemoveTags 
<
will remove all tags from all struct fields from line 10 to line 20.
>
    :GoRemoveTags json,omitempty
<
will remove the `omitempty` option from all `json` tagged fields in the current 
struct.
>
    :GoRemoveTags json
<
will completely remove all `json` tags in the current struct. This:
>
    :GoRemoveTags
<
will remove all tags in the current struct or visual selection.

To remove all tags in the entire document:
>
    :%GoRemoveTags
<
Behind the scenes this uses the `gomodifytags` tool. See |goldsmith-resources|
for where this tool can be found.

To install `gomodifytags` you can use |:GoInstallBinaries|.

                                                                  *:GoClearTags*
:[range]GoClearTags

Clear all tags in the current struct or the given range. 

This is essentially an alias for |:GoRemoveTags| with no arguments.

Behind the scenes this uses the `gomodifytags` tool. See |goldsmith-resources|
for where this tool can be found.

                                                            *:GoInstallBinaries*
:GoInstallBinaries [tools]

Install many of the third-party tools that are needed by Goldsmith. By default 
all required tools are installed. If you supply [tools] only those tools that 
are specified will be installed. You can use tab-completion to select which
tools to install.

Running :GoInstallBinaries multiple times is fine. Each time it is run it will
attempt to build and install each tool, updating the tool, if needed.

                                                                        *:GoAlt*
:GoAlt[!]

Switch to the "alternate" file for the current file. 

If you are editing a code file this will switch you to the test file for that 
code file. If you use "!" and the test file does not exist one will be created.

If you are editing a test file this will switch you to the code file for that
test file. If you use "!" and the code file does not exist one will be created. 

If a buffer for the "alternate" file exists that buffer will be used. If a
window already exists with that buffer the window will be used. A new buffer
or window will be created if they do not already exist (contingent on the 
value of |goalt.use_current_window|).

                                                                 *:GoFillStruct*
:GoFillStruct

Will fill the struct the cursor is over. This utilizes `gopls` and is simply a
frontend for performing the "fill_struct" code action. The main difference 
between this and using |:GoCodeAction| is that |:GoCodeAction| will prompt you
to select from a list of actions (even if the list has only one entry). 
:GoFillStruct will never prompt.

                                                                       *:GoImpl*
:GoImpl <recv> <interface>

Create a stub implementation for the given <interface> using <recv> as the 
receiver. The stub implementation will be inserted on the lines directly
below the cursor.

To create a stub implementation for the io.Reader interface using "f *File"
as the receiver:
>
    :GoImpl f *File io.Reader
<
To create a stub implementation for the hash.Hash interface using Murmur as
the receiver:
>
    :GoImpl Murmur hash.Hash
<
You can use completion when attempting to specify the <interface>. The 
completion can help to find the appropriate package and the interfaces
within that package.

Behind the scenes this uses the `impl` tool. See |goldsmith-resources| for
where this tool can be found.

To install `impl` you can use |:GoInstallBinaries|.

                                                                        *:GoDef*
:GoDef

Jump to the definition of the symbol under the cursor.

You can set |goldsmith-window-settings| within the "jump" configuration key to 
control the effect of running :GoDef. By default running :GoDef will jump to 
the definition of the symbol under the cursor in the current window. If you have
set |jump.use_current_window| to false it will open a new window based on your 
|goldsmith-window-settings|. 

                                                                       *:GoInfo*
:GoInfo

Display information about the symbol under the cursor in a floating window.

                                                                    *:GoSigHelp*
:GoSigHelp

Display signature information about the symbol under the cursor in a floating 
window.

                                                                    *:GoDefType*
                                                                    *:GoTypeDef*
:GoDefType
:GoTypeDef

Jump to the definition of the type of the symbol under the cursor.

You can set |goldsmith-window-settings| within the "jump" configuration key to 
control the effect of running :GoTypeDef. By default running :GoTypeDef will jump 
to the definition of the symbol under the cursor in the current window. If you 
have set |jump.use_current_window| to false it will open a new window based on 
your |goldsmith-window-settings|. 

                                                                 *:GoCodeAction*
:GoCodeAction

Perform the code action for any code actions available on the current line.

                                                                        *:GoRef*
:GoRef

List all references to the symbol under the cursor in the quickfix window.

                                                                   *:GoShowDiag*
:GoShowDiag

Show all diagnostics for the current line in a floating window.

                                                                   *:GoListDiag*
:GoListDiag

Place all diagnostics for the current buffer in the location list.

                                                                     *:GoRename*
:GoRename name

Rename the symbol under the cursor to the name passed as an argument.

                                                               *:GoSymHighlight*
:GoSymHighlight

Highlight all references to the symbol under the cursor. This is a one-shot 
command. It does not toggle |highlight.current_symbol|.

                                                             *:GoSymHighlightOn*
:GoSymHighlightOn

This turns on symbol highlighting. It is the same as having the
|highlight.current_symbol| setting turned on. 

                                                            *:GoSymHighlightOff*
:GoSymHighlightOff

This turns off symbol highlighting. It is the same as having the
|highlight.current_symbol| setting turned off.

                                                                 *:GoCodeLensOn*
:GoCodeLensOn

Turn codelens information on. This turns on codelens information as virtual text
in your buffer(s). What is displayed is dependent on how `gopls` was configured.

For details on what codelenses are available see the codelenses section of:
https://github.com/golang/tools/blob/master/gopls/doc/settings.md#ui

See also |codelens.show|

                                                                *:GoCodeLensOff*
:GoCodeLensOff

Turn codelens information off. This turns off codelens information for all 
buffers.

See also |codelens.show|

                                                                *:GoCodeLensRun*
:GoCodeLensRun

Run the current codelens that is displaying on the current line.

                                                                   *:GoToStruct*
:[range]GoToStruct [name]

Converts JSON to Go structs. 

If a range is given (or a visual selection is made) this command will convert 
the selected JSON to a Go struct. The contents of the struct are immediately 
pasted to the current buffer and replaces the range or visual selection.

If no visual selection is made and no range is given the command will look in
the plus register ("+) for JSON to convert (the register may be changed by 
setting |goldsmith-gotostruct.fetch_register|). If the register is empty an 
error will be displayed.

The encompassing structure will be named 'Foo' by default. The user may pass
a name as the only argument to the command to name it something else.
>
    :GoToStruct AwesomeStruct
<
The above will name the struct 'AwesomeStruct' instead of 'Foo'.

When processing the given JSON all leading comments will be stripped. This 
allows the visual selection (or register) to contain a commented-out JSON 
structure. Comments are considered to be either leading '//' or '#'. Comments 
may be preceded by whitespace. The following will correctly convert to a Go 
struct:
>
    ///// [
    ///// {
    ////  "versions": "go1.17.1",
      //  "stable": true,
      //  "files": [
      //   {
      //    "filenames": "go1.17.1.src.tar.gz",
      //    "os": "",
    ///    "arch": "",
    //    "version": "go1.17.1",
    //    "size": 22181735,
    //    "kind": "source"
    //   }
    //  ]
    // }
    // ]
<
If both acceptable types of comments are used on the same line the JSON decoding
will fail.

Behind the scenes this uses the `json-to-struct` tool. See |goldsmith-resources|
for where this tool can be found.

To install `json-to-struct` you can use |:GoInstallBinaries|.

                                                                *:GoToStructReg*
:[range]GoToStructReg [name]

Exactly like |:GoToStruct| but, instead of immediately pasting the struct to the
current buffer, it will by default place the struct in the star register ("*). 
Use |goldsmith-gotostruct.store_register| to change the register that this 
command uses to store the struct.

                                                                   *:GoCoverage*
:GoCoverage[!] ...

Run `go test` in the background and generate a coverage profile. When the profile
has been completed, which requires the `go test` to end successfully, annotate
the current buffer to show what is covered and what is not. If the current buffer
is a test file nothing will appear to happen. You can navigate to any file that
has had coverage data created for it (to see a list of such files use
|:GoCoverageFiles|) and type |:GoCoverageOn| to see the coverage annotations.
Use |:GoCoverageOff| to turn off the coverage annotations for the current buffer.

This command runs asynchronously and, at times, can take awhile. If you run this
command while another coverage job is running Goldsmith will disallow the new
job from continuing. If you use '!' the currently running job will be killed 
and a new one will start. This restriction is not per-buffer or per-package but
global.

Once you have run this command you can load other buffers with files that were
involved in the coverage profile. Once loaded you can run |:GoCoverageOn| to 
see the annotations. 

If given no arguments this command acts on the current package. If arguments
are given it is up to the user to provide the correct path(s). You can use 
comand-completion to get the correct package path(s).

If you wish to run the profile for the entire project you can run:
>
  :GoCoverage ./...
<
If no file/package arguments are passed to this command the package of the
current buffer will be inserted at the end of the command. e.g.:
>
    :GoCoverage -n 
< 
will translate to (something like):
>
    go test -n -coverprofile=<profile> <current package>
<
If you place two dashes in the command-line the current package will replace the
two dashes in the command line. Any arguments following the two dashes will be
inserted after the current package. e.g.:
>
    :GoCoverage -n -- -z
<
will translate to (something like):
>
    go test -n -coverprofile=<profile> <current package> -z
<
If you place three dots in the command-line it is similar to two dashes except
it is now the current package and all below it. e.g.:
>
    :GoCoverage -n ... -z
<
will translate to:
>
    go test -n -coverprofile=<profile> <current package>/... -z
<
If you have a package or file in the command then no insertion of the current
package occurs.

The annotation colors showing the coverage can be modified by the user using 
typical highlighting commands. e.g.
>
  hi goCoverageNormal ctermfg=white guifg=#FFFFFF
  hi goCoverageCovered ctermfg=blue guifg=#0000FF
  hi goCoverageNotCovered ctermfg=red guifg=#FF0000
<
The three group names given above are the only three names used when annotating a 
file for code coverage. By default the three groups are assigned to typical
colorscheme highlight groups:
>
  hi def link goCoverageNormal Comment
  hi def link goCoverageCovered MoreMsg
  hi def link goCoverageNotCovered ErrorMsg
<
You can pass arguments to `go test` on the command-line. 

                                                            *:GoCoverageBrowser*
:GoCoverageBrowser[!] ...

Exactly like |:GoCoverage| except, instead of annotating the current buffer, 
launch a web browser (or use an existing web browser instance) and display the 
coverage data there.

Like |:GoCoverage| this will store the coverage data and you can use
|:GoCoverageOn| and |:GoCoverageOff| to toggle annotations within the editor.
Unlike |:GoCoverage| annotations are not shown by default in the current buffer.

                                                                 *:GoCoverageOn*
:GoCoverageOn

Turn on coverage annotation for the current buffer. If the buffer has coverage
data available the annotations will be shown. If the buffer does not have coverage
data available it will notify the user with a warning.

If the current buffer is a test file this command does not switch to the 
corresponding code file. Use |:GoAlt| for that purpose or simply edit the file.

                                                                *:GoCoverageOff*
:GoCoverageOff

Turn off the annotation for the current buffer, if any.

                                                              *:GoCoverageFiles*
:GoCoverageFiles

List all the files that currently have coverage data.

If you have Telescope installed you can use the 
|(goldsmith-telescope-go-covered-files)| mapping instead.

                                                              *:GoCreateConfigs*
:GoCreateConfigs[!] [service] ...

This is meant as a convenience command to be used when first starting a project.
This command creates the recommended configuration files for all linters, 
formatters, etc... that require a configuration file, in the root directory of 
your project. (Goldsmith assumes that the current working directory is the root 
of your project.)

For this command to create a configuration file it first means that each service
that requires a configuration must have its config_file setting set to something
other than nil.

This command will not overwrite any file in the current working directory that
already exists unless you provide the "!". 

You can optionally provide the name of the service you wish to generate a 
configuration file for, or a list of such services. Tab-completion may be used 
to discover the name(s) of services that have configuration files that can be 
written. Names of services that are not recognized will be ignored.

Currently there are two configuration files that are created, one for `revive` 
and one for `golangci-lint`.

                                                               *:GoDebugConsole*
:GoDebugConsole

If |goldsmith-debug.enable| is set to true this command will toggle the 
visibility of the debug console. By default the console is hidden.

The debug console displays the output of all Goldsmith logging. Some output may 
be very large. Turning on debugging can impose a performance cost on Goldsmith.

If the buffer associated with the debug console is wiped, deleted, or unloaded
the console becomes useless and all logging is lost.

When you are using the debug console the output shows up in a window. If you are 
in this window you can use 'f' to 'follow' the output of the debug logging. To 
stop following you can press 's'. By default the debug console is in follow mode.

                                                     *goldsmith-module-commands*
MODULE RELATED COMMANDS

CodeLens commands are also available when editing the go.mod file.

The following commands are only available if you are editing a go.mod file.

                                                                   *:GoModCheck*
:GoModCheck

Check all required modules and inform the user if any can be upgraded. Any
modules that can be upgraded may be upgraded using a code action.

                                                                     *:GoModFmt*
:GoModFmt

Format the current go.mod file. This is an alias for |:GoFormat|.

                                                                 *:GoModReplace*
:GoModReplace [module] replacement

Create a new "replace" rule in the current go.mod file. 

If only the "replacement" is given the module to replace it will be determined 
by the module that the cursor is currently sitting on. 

If [module] and "replacement" are given then a "replace" rule is created for
the given [module] using the "replacement"

See ':GoHelp mod edit' for more information on editing the module file.

:GoModExclude [module ...]

Create a new "exclude" rule in the current go.mod file. 

If no argument is given the module to exclude will be determined by the module 
that the cursor is currently sitting on. 

If a module or modules are given then an "exclude" rule is created for the given 
module. Each provided module must have a valid version number.

See ':GoHelp mod edit' for more information on editing the module file.

                                                                 *:GoModRetract*
:GoModRetract version [version ...]

Create a new "retract" rule in the current go.mod file. 

You can retract single versions or version ranges. e.g.
>
    :GoModRetract v1.2.3,v1.3.1 v1.1.1
<
The above retracts a range from version 1.2.3 to version 1.3.1. It also retracts
a single version: 1.1.1.

See ':GoHelp mod edit' for more information on editing the module file.

                                                                    *:GoModTidy*
:GoModTidy

Cleanup the go.mod file. See ':GoHelp mod tidy' for more information on what
this does.

================================================================================
TESTING AND BENCHMARKING                                     *goldsmith-testing*
                                                        *goldsmith-benchmarking*
                                            *goldsmith-testing-and-benchmarking*

INTRODUCTION

All test commands run with '-json', however the output (if you are using the 
'display' strategy) is just like '-v'. Currently there is no way to see the 
actual JSON output unless you use |:GoTest|. There is also no way to see the 
non-verbose output due to how the JSON output works. This method was chosen due
to an issue with finding the specific file that produced the error when using 
traditional Vim means (i.e. using |errorformat|). Using the JSON output allows 
for correct reporting of which file produced the error, if any. The author has 
also seen this file-identification problem using `vim-test` and also `vim-go`.
Since this method is novel it may well have problems, particularly at the edges.
Please report any problems you find using |goldsmith-help|.

Goldsmith integrates with the `gotests` test generation tool. See
|goldsmith-resources| for where this tool can be found. To install `gotests` you 
can use |:GoInstallBinaries|. Goldsmith can work fine without `gotests`. If you 
don't want to install `gotests` all test-generation (|:GoAddTests| and 
|:GoAddTest|) will fail to work.

SETTINGS

If you have installed `gotests`, but have yet to configure them, you can still 
use Goldsmith. Goldsmith will detect when required `gotests` variables are unset
and will set them to reasonable defaults. See |goldsmith-testing-settings| for
what settings can be set.

Test running is configured via |goldsmith-testing-settings|.

WINDOW

When you are using the 'display' strategy the test output shows up in a window. 
By default, if you are in this window, the output of the test will scroll. If
you are in this window you can use 's' to to stop this scrolling. Press 'f' to
start the scrolling again.

QUICKFIX

When test failures occur they are placed in the quickfix list and the list is
opened. Focus remains on the current working window.

COMMANDS

                                                                  *:GoTestSuite*
:GoTestSuite [args]

Run all tests for the current project. This command acts the same if it is run
from a code file or a test file.

Arguments to `go test` may be passed via the command and via 
|goldsmith-testing.arguments|.

                                                                 *:GoTestBSuite*
:GoTestBSuite [args]

Run all benchmarks for the current project. This command acts the same if it is
run from a code file or a test file.

Arguments to `go test` may be passed via the command and via 
|goldsmith-testing.arguments|.

                                                                 *:GoTestASuite*
:GoTestASuite [args]

Run all tests and benchmarks for the current project. This command acts the same 
if it is run from a code file or a test file.

Arguments to `go test` may be passed via the command and via 
|goldsmith-testing.arguments|.

                                                                    *:GoTestPkg*
:GoTestPkg [args]

Run the tests for the current package, or, pass the paths for directories where
tests should be run.

If no file/package arguments are passed to this command the package of the
current buffer will be inserted at the end of the command. e.g.:
>
    :GoTestPkg
< 
will translate to:
>
    go test <current package>
<
If you place two dashes in the command-line the current package will replace the
two dashes in the command line. Any arguments following the two dashes will be
inserted after the current package. e.g.:
>
    :GoTestPkg -n -- -z
<
will translate to:
>
    go test -n <current package> -z
<
If you place three dots in the command-line it is similar to two dashes except
it is now the current package and all below it. e.g.:
>
    :GoTestPkg -n ... -z
<
will translate to:
>
    go test -n <current package>/... -z
<
Command completion can be used to pass directories within the current project
to the command. The list of directories are those that contain packages.

Arguments to `go test` may be passed via the command and via 
|goldsmith-testing.arguments|.

                                                                   *:GoTestBPkg*
:GoTestBPkg [args]

Run the benchmarks for the current package, or, pass the paths for directories
where benchmarks should be run.

Command completion can be used to pass directories within the current project
to the command. The list of directories are those that contain packages.

Arguments to `go test` may be passed via the command and via 
|goldsmith-testing.arguments|.

                                                                   *:GoTestAPkg*
:GoTestAPkg [args]

Run all tests and benchmarks for the current package, or, pass the paths for 
directories where tests and benchmarks should be run.

Command completion can be used to pass directories within the current project
to the command. The list of directories are those that contain packages.

Arguments to `go test` may be passed via the command and via 
|goldsmith-testing.arguments|.

                                                                    *:GoTestRun*
:GoTestRun [tests]

There are two scenarios: 1) if arguments are passed in they are assumed to be 
names of tests to run. You can use command-completion to see the names of all 
tests for the current package 2) if no arguments are passed in this acts just 
like |:GoTestPkg|.

By default the tests to run are looked for in the current package. However, if 
you pass './...', the tests will be looked for throughout the entire project.
Or, if you pass '...' the tests will be looked for in the current package and
all packages below it. e.g.:
>
    :GoTestRun TestSomeTest 
<
Will run the equivalent of:
>
    go test -run='^TestSomeTest$' <current package>
<
However,
>
    :GoTestRun TestSomeTest ./...
<
will run the equivalent of:
>
    go test -run='^TestSomeTest$' ./...
<
and
>
    :GoTestRun TestSomeTest ...
<
will run the equivalent of:
>
    go test -run='^TestSomeTest$' <current package>/...
<
Arguments to `go test` may only be passed via |goldsmith-testing.arguments|.

                                                                   *:GoTestBRun*
:GoTestBRun [tests]

There are two scenarios: 1) if arguments are passed in they are assumed to be 
names of benchmarks to run. You can use command-completion to see the names of
all benchmarks for the current package 2) if no arguments are passed in this 
acts just like |:GoTestPkg|.

Argument processing is just like |:GoTestRun|.

Arguments to `go test` may only be passed via |goldsmith-testing.arguments|.

                                                                   *:GoTestARun*
:GoTestARun [tests]

There are two scenarios: 1) if arguments are passed in they are assumed to be 
names of tests and/or benchmarks to run. You can use command-completion to see
the names of all tests and benchmarks for the current package 2) if no arguments 
are passed in this acts just like |:GoTestPkg|.

Argument processing is just like |:GoTestRun|.

Arguments to `go test` may only be passed via |goldsmith-testing.arguments|.

                                                                *:GoTestNearest*
:GoTestNearest [args]

Within a code file this command will identify the function your cursor is 
currently in, match that function's name to a test routine in your test file, 
and will run that test. If your cursor is not within a function, or if there is 
no matching test routine a warning will be printed.

Within a test file this command will identify the function your cursor is 
currently in and will attempt to run it as a test.

The function test matching works as follows: it searches for two different
function names within your test file, Test<funcname> and Test_<funcname>. The
matching is case sensitive (it also will match Examples in a similar way).

Arguments to `go test` may be passed via the command and via 
|goldsmith-testing.arguments|.

                                                               *:GoTestBNearest*
:GoTestBNearest [args]

Within a code file this command will identify the function your cursor is 
currently in, match that function's name to a benchmark routine in your test
file, and will run that benchmark. If your cursor is not within a function, or 
if there is no matching benchmark routine a warning will be printed.

Within a test file this command will identify the function your cursor is 
currently in and will attempt to run it as a benchmark.

The function benchmark matching works as follows: it searches for two different
function names within your test file, Benchmark<funcname> and 
Benchmark_<funcname>. The matching is case sensitive.

Arguments to `go test` may be passed via the command and via 
|goldsmith-testing.arguments|.

                                                               *:GoTestANearest*
:GoTestANearest [args]

Within a code file this command will identify the function your cursor is 
currently in, match that function's name to a test and/or benchmark routine in
your test file, and will run that test and/or benchmark. If your cursor is not 
within a function, or if there is no matching test and/or benchmark routine a 
warning will be printed.

Within a test file this command will identify the function your cursor is 
currently in and will attempt to run it as a test and/or benchmark.

If the current function in a code file has all of an example, benchmark, and
test all three will be run.

Arguments to `go test` may be passed via the command and via 
|goldsmith-testing.arguments|.

                                                                  *:GoTestVisit*
:GoTestVisit[!]

When run, and if you have not previously run a test, this command will take you 
to the test/code file for the current code/test file (essentially acting like 
|:GoAlt|.) If you have previously run a test this command will take you to the 
file for that test. Note that not all test commands operate on a single file, 
and therefore do not affect what is considered the 'last test file'. Commands
that do affect the 'last test file' are :GoTestRun, :GoTestNearest, :GoTestBRun,
and :GoTestBNearest.

This command will honor your |goldsmith-window-settings| and your "gotestvisit"
window settings.

Arguments to `go test` may be passed via the command and via 
|goldsmith-testing.arguments|.

                                                                   *:GoTestLast*
:GoTestLast [args]

Run the previous test/benchmark command. The test framework keeps track of the 
last test command that was run and this command will run it again.

Arguments to `go test` may be passed via the command and via 
|goldsmith-testing.arguments|.

                                                                       *:GoTest*
:GoTest[!] [args]

This command simply runs 'go test' with the arguments that are passed to it 
(with some minor exceptions explained below). By default it runs in a terminal. 
If you pass '!' it will run in the background. This command does not interact 
with the quickfix or location list in any way and does not honor the 
|goldsmith-testing-settings|. Instead it honors settings in the 'gotest' config 
key, including |goldsmith-terminal-settings|. It is intended to be a (mostly) 
bare proxy to `go test` and is separate from any of the Goldsmith test runners.

If no file/package arguments are passed to this command the package of the
current buffer will be inserted at the end of the command. e.g.:
>
    :GoTest -n 
< 
will translate to:
>
    go test -n <current package>
<
If you place two dashes in the command-line the current package will replace the
two dashes in the command line. Any arguments following the two dashes will be
inserted after the current package. e.g.:
>
    :GoTest -n -- -z
<
will translate to:
>
    go test -n <current package> -z
<
If you place three dots in the command-line it is similar to two dashes except
it is now the current package and all below it. e.g.:
>
    :GoTest -n ... -z
<
will translate to:
>
    go test -n <current package>/... -z
<
If you have a package or file in the command then no insertion of the current
package occurs.

Command completion may be used to discover all packages for the current project.

Arguments to `go test` may only be passed via the command.

                                                                   *:GoAddTests*
:GoAddTests [options]

Generate tests for all functions/methods in the current Go file. This does not
overwrite any tests that already exist, but it may make new stub tests. 

The only options are -p and -e. -p means generate parallel subtests. -e means
to only generate tests for exported functions/methods.

                                                                    *:GoAddTest*
:GoAddTest [options] [function_name]

Generate a stub test for either the function/method passed to the command or 
generate a stub test for the current function/method the cursor is currently
in. If the given [function_name] does not exist no test is created.

The only option is -p. -p means generate parallel subtests.

You can use command completion to see all available functions in the current
file.

================================================================================
MAPPINGS                                                    *goldsmith-mappings*

INTRODUCTION                                   *goldsmith-mappings-introduction*

There are a set of <Plug> actions which can be used to create your own mappings.
Many of these have a default mapping. You can turn off all default mappings by 
setting |goldsmith-mappings.enable| to false.

You can also change the mapping for each <Plug> key or disable a <Plug> key in
the configuration settings. e.g.:
>
    mappings = {
      hover = { 'h', 'K' },
    } 
<
The above maps the 'h' and 'K' keys to trigger the "<Plug>(goldsmith-hover)"
action. All other mappings will use the default.
>
    mappings = {
      hover = {},
    } 
<
The above turns off all mappings for the "<Plug>(goldsmith-hover)" action. You 
must assign the action an empty table and not nil. Assigning to nil instructs
Goldsmith to use the default value for that action.
>
    mappings = {
      enabled = false,
      hover = { 'K' },
    } 
<
The above turns off all default mappings and sets only "<Plug>(goldsmith-hover)"
to a keymap.

Currently all <Plug> actions are for |Normal| mode.

ALL KEY MAPS                                       *goldsmith-mappings-all-maps*

Available <Plug> keys and their default (if any):

*(goldsmith-godef)*
Default: gd <C-]>

The same as |:GoDef|. Go to the definition of the symbol beneath the cursor.

*(goldsmith-hover)*
Default: K

The same as |:GoInfo|. Display information about the symbol under the cursor in 
a floating window.

*(goldsmith-goimplementation)*
Default: gi

Lists all the implementations for the symbol under the cursor in the quickfix
window.

*(goldsmith-sighelp)*
Default: <C-k>

The same as |:GoSigHelp|. Display signature information about the symbol under
the cursor in a floating window.

*(goldsmith-add-ws-folder)*
Default: <leader>wa

Add a workspace folder.

*(goldsmith-rm-ws-folder)*
Default: <leader>wr

Remove a workspace folder.

*(goldsmith-list-ws-folders)*
Default: <leader>wl

List all workspace folders.

*(goldsmith-typedef)*
Default: <leader>D

The same as |:GoTypeDef|. Jump to the definition of the type of the symbol 
under the cursor.

*(goldsmith-rename)*
Default: <leader>rn

The same as |:GoRename|. Rename the symbol under the cursor.

*(goldsmith-goref)*
Default: gr

The same as |:GoRef|. List all references to the symbol under the cursor in the
quickfix window.

*(goldsmith-codeaction)*
Default: <leader>ca

The same as |:GoCodeAction|. Perform the code action for any code actions 
available on the current line.

*(goldsmith-showdiag)*
Default: <leader>e

The same as |:GoShowDiag|. Show all diagnostics for the current line in a 
floating window.

*(goldsmith-prevdiag)*
Default: [d

Jump to the previous diagnostic closest to the cursor position.

*(goldsmith-nextdiag)*
Default: ]d

Jump to the inext diagnostic closest to the cursor position.

*(goldsmith-setloc)*
Default: <leader>q

The same as |:GoListDiag|. Place all diagnostics for the current buffer in the 
location list.

*(goldsmith-format)*
Default: <leader>f

The same as |:GoFormat|. Tell gopls and null-ls to format the current Go buffer
immediately.

*(goldsmith-toggle-debug-console)*
Default: none

The same as |:GoDebugConsole|. Toggle the debugging console used by Goldsmith when 
in debug mode. 

See |goldsmith-debug-settings| for more information on debug mode.

See the documentation for |:GoDebugConsole| for more information about it.

*(goldsmith-close-terminal)*
Default: none

For any command that opens a terminal this command will close said terminal.

*(goldsmith-close-any)*
Default: none

This will close any (or all) testing windows or terminals that have been opened by
Goldsmith.

This command will not close the Goldsmith debug console or help windows.

*(goldsmith-super-close-any)*
Default: none

This will close any (or all) testing windows or terminals that have been opened by
Goldsmith. It will also close the quickfix list if it is open.

This command will not close the Goldsmith debug console or help windows.

*(goldsmith-build)*
Default: none

Just like |:GoBuild|. Run 'go build' with no arguments.

*(goldsmith-build-last)*
Default: none

Just like |:GoBuildLast|. Run the previous |:GoBuild|.

*(goldsmith-run)*
Default: none

Just like |:GoRun|. Run 'go run' with no arguments.

*(goldsmith-run-last)*
Default: none

Just like |:GoRunLast|. Run the previous |:GoRun|.

*(goldsmith-test-last)*
Default: none

The same as |:GoTestLast|. Run the most recent test command again.

See |goldsmith-testing| for more information.

*(goldsmith-test-visit)*
Default: none

The same as |:GoTestVisit|. View the file with the last test that ran.

See |goldsmith-testing| for more information.

*(goldsmith-test-nearest)*
Default: none

The same as |:GoTestNearest|. Run the nearest test to the cursor.

See |goldsmith-testing| for more information.

*(goldsmith-test-suite)*
Default: none

The same as |:GoTestSuite|. Run all tests for the current project.

See |goldsmith-testing| for more information.

*(goldsmith-test-pkg)*
Default: none

The same as |:GoTestPkg|. Run all tests for the current package.

See |goldsmith-testing| for more information.

*(goldsmith-test-b-nearest)*
Default: none

The same as |:GoTestBNearest|. Run the nearest benchmark to the cursor.

See |goldsmith-testing| for more information.

*(goldsmith-test-b-suite)*
Default: none

The same as |:GoTestBSuite|. Run all benchmarks for the current project.

See |goldsmith-testing| for more information.

*(goldsmith-test-b-pkg)*
Default: none

The same as |:GoTestBPkg|. Run all tests for the current package.

See |goldsmith-testing| for more information.

*(goldsmith-test-a-nearest)*
Default: none

The same as |:GoTestANearest|. Run all the nearest tests/benchmarks to the cursor.

See |goldsmith-testing| for more information.

*(goldsmith-test-a-suite)*
Default: none

The same as |:GoTestASuite|. Run all tests and benchmarks for the current project.

See |goldsmith-testing| for more information.

*(goldsmith-test-a-pkg)*
Default: none

The same as |:GoTestAPkg|. Run all tests and benchmarks for the current package.

See |goldsmith-testing| for more information.

*(goldsmith-test-close-window)*
Default: none

Close the window for the currently running test(s). This effectively turns the
currently running test job into a background job. This is not a toggle. Once the
window is closed you cannot get it back.

This mapping is only available when using the 'native' runner.

*(goldsmith-alt-file)*
Default: none

The same as |:GoAlt|. Switch to the alternate file for the current file.

*(goldsmith-alt-file-force)*
Default: none

The same as |:GoAlt| with the bang (e.g. :GoAlt!). Switch to the alternate file 
for the current file and create the alternate file if it does not exist.

*(goldsmith-fillstruct)*
Default: none

The same as |:GoFillStruct|. Fill all fields of the struct the cursor is under.

*(goldsmith-codelens-on)*
Default: none

The same as |:GoCodeLensOn|. Turn on codelense.

*(goldsmith-codelens-off)*
Default: none

The same as |:GoCodeLensOff|. Turn off codelense.

*(goldsmith-codelens-run)*
Default: none

The same as |:GoCodeLensRun|. Run the codelens for the line the cursor is 
currently on.

*(goldsmith-sym-highlight-on)*
Default: none

The same as |:GoSymHighlightOn|. Turn on symbol highlighting.

*(goldsmith-sym-highlight-off)*
Default: none

The same as |:GoSymHighlightOff|. Turn off symbol highlighting.

*(goldsmith-sym-highlight)*
Default: none

The same as |:GoSymHighlight|. Highlight all references to the current symbol 
beneath the cursor.

*(goldsmith-coverage)*
Default: none

The same as |:GoCoverage|. Generate coverage information for the current package.

*(goldsmith-coverage-browser)*
Default: none

The same as |:GoCoverageBrowser|. Generate coverage information for the current
package and launch a browser to show it.

*(goldsmith-coverage-on)*
Default: none

The same as |:GoCoverageOn|. Turn on coverage annotation for the current buffer.

*(goldsmith-coverage-off)*
Default: none

The same as |:GoCoverageOff|. Turn off coverage annotation for the current buffer.

*(goldsmith-coverage-files)*
Default: none

The same as |:GoCoverageFiles|. Show all files with coverage data.

*(goldsmith-telescope-go-files)*
Default: none

Open Telescope with all of the Go files (test and code) for the current project.

*(goldsmith-telescope-go-test-files)*
Default: none

Open Telescope with all of the Go test files for the current project.

*(goldsmith-telescope-go-code-files)*
Default: none

Open Telescope with all of the Go code files for the current project.

*(goldsmith-telescope-go-covered-files)*
Default: none

Open Telescope with all of the currently covered files. See |:GoCoverage| for more 
information on coverage.

*(goldsmith-start-follow)*
Default: F

For some special buffers/windows (such as the |:GoDebugConsole| or the 'native' 
runner's test output) this map turns on automatic scrolling of the output to
this buffer/window.

*(goldsmith-stop-follow)*
Default: S

For some special buffers/windows (such as the |:GoDebugConsole| or the 'native' 
runner's test output) this map turns off automatic scrolling of the output to
this buffer/window.

MAPPING MANUALLY                                     *goldsmith-mappings-manual*

It is much easier to use the |goldsmith-mappings| configuration to set <Plug> 
actions to a key map. However, you can create the keymap yourself if you want.

An example setting some mappings, using Lua, to the defaults:

local opts = { silent = true }
vim.api.nvim_buf_set_keymap(0, 'n', 'gd', '<Plug>(goldsmith-godef)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', 'K', '<Plug>(goldsmith-hover)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', 'gi', '<Plug>(goldsmith-goimplementation)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', '<C-k>', '<Plug>(goldsmith-sighelp)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', '<space>wa', '<Plug>(goldsmith-add-ws-folder)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', '<space>wr', '<Plug>(goldsmith-rm-ws-folder)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', '<space>wl', '<Plug>(goldsmith-list-ws-folders)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', '<space>D', '<Plug>(goldsmith-typedef)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', '<space>rn', '<Plug>(goldsmith-rename)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', '<space>ca', '<Plug>(goldsmith-codeaction)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', 'gr', '<Plug>(goldsmith-goref)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', '<space>e', '<Plug>(goldsmith-showdiag)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', '[d', '<Plug>(goldsmith-prevdiag)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', ']d', '<Plug>(goldsmith-nextdiag)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', '<space>q', '<Plug>(goldsmith-setloc)', opts)
vim.api.nvim_buf_set_keymap(0, 'n', '<space>f', '<Plug>(goldsmith-format)', opts)

================================================================================
STATUS                                                        *goldsmith-status*

Goldsmith has the ability to integrate with your status line. Goldsmith exposes
one simple function that may be placed in any status line:
>
  require 'goldsmith'.status()
<
For example, in lualine, the following works fine:
>
  require 'lualine'.setup {
    ...
    sections = {
      ...
      lualine_c = {
        ...
        { "require 'goldmsith.status()" },
      }
      ...
    }
  }
<
The status indicates the following things: 
1) If the Goldsmith 🇬 is present it indicates that the current buffer is managed 
   by Goldsmith.
2) Directly after the 🇬 there is an indication of whether all needed services
   are running (typically this means gopls and null-ls). If all services are 
   running then 🌞 appears. Otherwise ❗ appears.
3) Directly after the server status there is an indication of whether the current
   buffer has coverage data (if so, the coverage annotations may be toggled using
   |:GoCoverageOn| and |:GoCoverageOff|). If there are two dashes following the
   service indicator (🇬 🌞╌) this indicates that there is no coverage data. If
   there is a circle-plus sign (🇬 🌞⨁ ) this indicates that coverage data is
   available. For more on coverage see |goldsmith-coverage|.
4) If Goldsmith jobs are running it will indicate how many are running and a short
   description of each job. 

See |goldsmith-statusline| for configuration items related to the statusline.

================================================================================
TEXT OBJECTS                                            *goldsmith-text-objects*

Goldsmith defines a few text objects using the nvim-treesitter-textobjects 
plugin.

                                                 *goldsmith-v_af* *goldsmith-af*
af            "a function", select contents from a function definition to the
               closing bracket.

                                                 *goldsmith-v_if* *goldsmith-if*
if            "inside a function", select contents of a function,
              excluding the function definition and the closing bracket. This
              text-object also supports literal functions

                                                 *goldsmith-v_ac* *goldsmith-ac*
ac            "a comment", select contents of the current comment block.

Goldsmith also defines the following text motion objects using the 
nvim-treesitter-textobjects plugin.

                                                                  *goldsmith-]]*
]]            Move forward to the next defined function.            

                                                                  *goldsmith-[[*
[[            Move backward to the previously defined function.

================================================================================
FUNCTIONS                                                  *goldsmith-functions*

*goldsmith-config()*

See |goldsmith-configuration| for a detailed look at config().

*goldsmith-needed()*

The needed() function takes a single argument: the name of a server. e.g. "gopls"
or "null" or "clangd". If the name of a server that Goldsmith can configure is 
passed-in the function returns true. Otherwise false. This is useful when 
creating a configuration for many LSP servers. See the wiki for a detailed look 
at needed():
https://github.com/WhoIsSethDaniel/goldsmith.nvim/wiki/Configurations

================================================================================
TELESCOPE INTEGRATION                                      *goldsmith-telescope*

Any of the telescope functions can take typical Telescope options. As of now
none of them take any Goldsmith specific options.

Each telescope function can be mapped to a keyboard shortcut using 
|goldsmith-mappings|.

*goldsmith-telescope-go-files*
Picker that only lists Go files. Includes all test files and all code files.
>
    require'goldsmith.telescope'.go_files()
<

*goldsmith-telescope-go-test-files*
Picker that only lists Go test files.
>
    require'goldsmith.telescope'.go_test_files()
<

*goldsmith-telescope-go-code-files*
Picker that only lists Go code files.
>
    require'goldsmith.telescope'.go_code_files()
<

*goldsmith-telescope-go-covered-files*
Picker that only lists Go files with coverage data. See |:GoCoverage| for more
information.
>
    require'goldsmith.telescope'.go_covered_files()
<

================================================================================
HEALTHCHECK                                              *goldsmith-healthcheck*

Goldsmith makes use of the Neovim |health| framework. You can run
>
    :checkhealth goldsmith
<
and get a best-effort attempt to find problems with your Go and Goldsmith setup.

================================================================================
HELP                                                            *goldsmith-help*       

There is a FAQ:
https://github.com/WhoIsSethDaniel/goldsmith.nvim/wiki/FAQ

If you have a question or think you have discovered a bug please feel free to 
ask a question in the Github discussions area: 
https://github.com/WhoIsSethDaniel/goldsmith.nvim/discussions

If you have discovered a bug please report it:
https://github.com/WhoIsSethDaniel/goldsmith.nvim/issues

================================================================================
RESOURCES                                                  *goldsmith-resources*

This lists the locations for various plugins and tools required, or optionally 
used, by Goldsmith. See |:GoInstallBinaries| for one way to install many of the 
third-party tools. See |goldsmith-supported-plugins| for more information about
the plugins that can be utilized by Goldsmith.

* supported plugins:
  `nvim-lspconfig`                https://github.com/neovim/nvim-lspconfig
  `nvim-lspinstall`               https://github.com/kabouzeid/nvim-lspinstall
  `nvim-lsp-installer`            https://github.com/williamboman/nvim-lsp-installer
  `nvim-treesitter`               https://github.com/nvim-treesitter/nvim-treesitter
  `nvim-treesitter-textobjects`   https://github.com/nvim-treesitter/nvim-treesitter-textobjects
  `null-ls`                       https://github.com/jose-elias-alvarez/null-ls.nvim

* 3rd-party tools
  `gopls`                         https://golang.org/x/tools/gopls
  `gomodifytags`                  https://github.com/fatih/gomodifytags
  `gotests`                       https://github.com/cweill/gotests
  `golines`                       https://github.com/segmentio/golines
  `impl`                          https://github.com/josharian/impl
  `revive`                        https://github.com/mgechev/revive
  `golangci-lint`                 https://github.com/golangci/golangci-lint/cmd/golangci-lint
  `staticcheck`                   https://honnef.co/go/tools/cmd/staticcheck
  `json-to-struct`                https://github.com/tmc/json-to-struct
