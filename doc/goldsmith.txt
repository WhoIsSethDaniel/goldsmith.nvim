*goldsmith.txt* Go development plugin for Neovim
*goldsmith*
>
                    __    __               _ __  __  
       ____ _____  / /___/ /________ ___  (_) /_/ /_ 
      / __ `/ __ \/ / __  / ___/ __ `__ \/ / __/ __ \
     / /_/ / /_/ / / /_/ (__  ) / / / / / / /_/ / / /
     \__, /\____/_/\__,_/____/_/ /_/ /_/_/\__/_/ /_/ 
    /____/

CONTENTS                                                    *goldsmith-contents*

  0. Intro........................................|goldsmith-intro|
  1. Requirements.................................|goldsmith-requirements|
  2. Features.....................................|goldsmith-features|
  3. Supported Plugins............................|goldsmith-supported-plugins|
  4. Configuration................................|goldsmith-configuration|
  5. Settings.....................................|goldsmith-settings|
  6. Commands.....................................|goldsmith-commands|
  7. Mappings.....................................|goldsmith-mappings|
  8. Text Objects.................................|goldsmith-text-objects|
  9. Functions....................................|goldsmith-functions|
 10. Health Check.................................|goldsmith-healthcheck|
 11. Help.........................................|goldsmith-help|
 12. Resources....................................|goldsmith-resources|

================================================================================
INTRO                                                          *goldsmith-intro*

Goldsmith provides a Go development environment for Neovim using native Neovim 
features and Neovim plugins, where possible.

One goal is to support as many best-in-class plugins as possible. Support will 
include optional auto-configuration of these plugins to provide reasonable 
defaults for Go development.

Another goal is to take advantage of the many new features of Neovim 0.5.0.
Primarily this includes the built-in Language Server Protocol (LSP) client, 
and the integration of Tree-sitter.

================================================================================
REQUIREMENTS                                            *goldsmith-requirements*

Goldsmith requires at least Neovim 0.5.0. You can run `nvim --version` to see
what version of Neovim you have.

It also requires some plugins. See the |goldsmith-supported-plugins| section 
for more information about that.

You can run `:checkhealth goldsmith` to see if you meet all the requirements and
to see if you have anything missing. See |goldsmith-healthcheck| and 
|goldsmith-supported-plugins| for more information.

MINIMAL VERSIONS                                    *goldsmith-minimal-versions*

The following are the minmal versions known to work with Goldsmith. It does not
mean that older versions will not work, but it is unknown if they will.

Not every tool reports a version. If you install everything with 
|:GoInstallBinaries| it is expected that Goldsmith will work fine as long as 
your Go installation meets the minimum version requirement. You can check
the version of all tools using |goldsmith-healthcheck|.

Tool                      Version
---------------------------------
go                         1.14
gopls                      0.6.0
golines                    0.4.0

================================================================================
FEATURES                                                    *goldsmith-features*

Features currently included:
* codelens support
* flag and update out-of-date dependencies in your current Go module
* automatically run goimports on save
* auto-highlight the current symbol under the cursor throughout the current buffer
* treesitter navigation utilizing the nvim-treesitter-textobjects plugin
* treesitter text objects utilizing the nvim-treesitter-textobjects plugin
* view Go documentation using the :GoDoc command and Go help with :GoHelp
* manually update imports using the :GoImports command
* use :checkhealth to see if your Goldsmith setup should work correctly
* format your code on demand using :GoFormat or have Goldsmith automatically format your code on save
* run extra linters and/or formatters using null-ls
* Goldsmith can completely configure everything for you, if you want
* generate test stubs automatically using `gotests`
* create implementation stubs for your interfaces using :GoImpl
* commands for common tasks (the following list is not complete):
    * switch to the 'alternate' file quickly
    * struct tag editing: add / remove / update struct tags and options
    * build your project using :GoBuild 
    * run your main package using :GoRun
    * fetch new Go libraries using :GoGet
    * install new Go tools using :GoInstall
    * run tests using :GoTest
* all the great Neovim LSP functions are available as Vim commands
* most commands are completely asynchronous

================================================================================
SUPPORTED PLUGINS                                  *goldsmith-supported-plugins*

A list of plugins that are either required or optional, but all are supported
in some way by Goldsmith. See the |goldsmith-resources| section below for links
to each plugin mentioned.

Required
* nvim-lspconfig
  Configure gopls and null-ls
* nvim-treesitter
  For syntax highlighting, folding, and indentation

Optional
* nvim-treesitter-textobjects
  Needed if you want treesitter textobjects and treesitter navigation. See
  |goldsmith-text-objects|.
* nvim-lspinstall
  For installing language servers. i.e. gopls
* null-ls
  For running extra linters and formatters

================================================================================
CONFIGURATION                                          *goldsmith-configuration*

The following section explains how Goldsmith can be used to help configure your 
Go-related LSP servers. For more complete examples please see the wiki page on 
configuration:
https://github.com/WhoIsSethDaniel/goldsmith.nvim/wiki/Configurations

*goldsmith-configuration-default*
You can use all the defaults by placing the following in your configuration:
>
    require("goldsmith").config()
<
Assuming you do nothing else the above will cause Goldsmith to attempt to
configure null-ls and gopls for you. This means that null-ls will attempt
to run `golines` and `revive`, and gopls will have a minimal configuration
that looks something like the following (this example is with gopls 0.7.1):
>
    capabilities = { ... }
    cmd = { "<discovered gopls executable>", "-remote=auto" },
    filetypes = { "go", "gomod" },
    flags = {
        debounce_text_changes = 500
    },
    root_dir = <function 1>,
    settings = {
        diagnosticsDelay = "500ms",
        experimentalPostfixCompletions = true,
        experimentalUseInvalidMetadata = true,
        gopls = {
            codelenses = {
                gc_details = true
            },
            gofumpt = true,
            staticcheck = true,
            usePlaceholders = true
        }
    }

*goldsmith-configuration-no-autoconfig*
You can turn off the auto-configuration of servers, e.g.:
>
    require("goldsmith").config({ autoconfig = false })
<
If you do not allow Goldsmith to help configure your servers there are 
certain features that will not work. 

*goldsmith-configuration-explicit*
You can explicitly configure servers in two different ways. The first way
is by passing the configuration for each server to goldsmith.config():
>
    require("goldsmith").config({
        gopls = {
            config = function()
                return {
                    cmd = { 'gopls' },
                    settings = {
                        gopls = {
                            gofumpt = false,
                        },
                    },
                },
            end,
        },
        null = {
            config = {
                sources = { fmt.stylua, fmt.shfmt },
            },
        },
    })

    ...

    require("goldsmith").server('gopls')
    require("goldsmith").server('null')
<
The example above configures `gopls` using a combination of the provided 
configuration plus configuration that Goldsmith provides. Any conflicts
between the provided configuration and Goldsmith's configuration are
decided in favor of the user's configuration.

You can pass the configuration either as a table or as a function. The 
example above shows one of each. Using a function is a good way to 
delay the generation of the configuration until as late as possible. If
you have a very dynamic configuration you should use a function.

If you are using Goldsmith to configure servers you should not use
lspconfig to configure those servers. Goldsmith will configure the
servers and call lspconfig.

If you want null-ls to do non-Go things (such as in the example above 
where null-ls will run stylua and shfmt), and you want Goldsmith to
configure null-ls for Go-related things, you will need to pass the
non-Go portion of your null-ls configuration to Goldsmith.

A second way to pass configuration for your servers to Goldsmith is 
using the second argument to goldsmith.server():
>
    require("goldsmith").server('gopls', function()
        return {
            cmd = { 'gopls' },
            settings = {
                gopls = {
                    gofumpt = false,
                },
            },
        },
    end)
    require("goldsmith").server('null', { 
        sources = { fmt.stylua, fmt.shfmt } 
    })
<
The above configuration is equivalent to the previous example. Again,
you can use either a function or a table for providing the 
configuration.

*goldsmith-configuration-all-defaults*
A configuration that sets settings to the defaults:
>
    require("goldsmith").config({
        goimports = {
            run_on_save = true,
            timeout = 1000,
        },
        goalt = {
          use_current_window = false,
        },
        tests = {},
        window = {
            pos = "right",
            focus = true,
            height = 20,
            width = 80,
        },
        terminal = {
            pos = "right",
            focus = false,
            height = 20,
            width = 80,
        },
        tags  = {
            default_tag = "json",
            transform = "snakecase",
            skip_unexported = false,
        },
        revive = {
            config_file = 'revive.toml',
        },
        format = {
            max_line_length = 120,
            run_on_save = true,
        },
        highlight = {
            current_symbol = true,
        },
        codelens = {
            show = true,
        },
        gopls = {},
        null = {},
    })
<

================================================================================
SETTINGS                                                    *goldsmith-settings*

FORMATTING                                       *goldsmith-formatting-settings*

*format.run_on_save*                              *goldsmith-format.run_on_save*

Default: true
When you save your current document formatting should be applied. 

This will apply all formatting except for `goimports` formatting. `goimports` 
formatting is conditional on the setting of |goimports.run_on_save|.

*format.max_line_length*                      *goldsmith-format.max_line_length*

Default: 120
The max number of columns to allow for code lines. 

Behind the scenes this controls the configuration of `golines`.

See |goldsmith-resources| for where `golines` can be found.

To install `golines` you can use |:GoInstallBinaries|.

*goimports.run_on_save*                        *goldsmith-goimports.run_on_save*

Default: true
When you save Go program source have gopls run 'goimports' to arrange and fix 
the import section. If you set this to false you can run |:GoImports| manually
to arrange the imports in your code.

*goimports.timeout*                                *goldsmith-goimports.timeout*

Default: 1000
How long to wait for a response from gopls when requesting that goimports be 
run. The units are milliseconds, so 1000 = 1 second.

ALTERNATE FILE                               *goldsmith-alternate-file-settings*

*goalt.use_current_window*                  *goldsmith-goalt.use_current_window*

Default: false
Set to 'true' to use the current window when loading the alternate file. If 
'false' Goldsmith will create a new window based on your
|goldsmith-window-settings|.

TESTING                                             *goldsmith-testing-settings*

*tests.template*                                      *goldsmith-tests.template*

Default: nil
Specify custom test code templates.

*tests.template_dir*                              *goldsmith-tests.template_dir*

Default: nil
Path to a directory containing custom test code templates.

*tests.template_params_dir*                *goldsmith-tests.template_params_dir*

Default: nil
Read external parameters to template by json with file.

LINTING                                             *goldsmith-linting-settings*

*revive.config_file*                              *goldsmith-revive.config_file*

Default: revive.toml
The configuration file for `revive`. If revive has been configured to run this 
file is required to exist and should exist in the project root directory. 

See |goldsmith-resources| for where `revive` can be found.

To install `revive` you can use |:GoInstallBinaries|.

LSP SERVER                                                *goldsmith-lsp-server*

*null.diabled*                                         *goldsmith-null.disabled*

Default: false
If this setting is set to either 'true' or an empty table it means that null-ls
will not be configured by Goldsmith.
>
    null = {
        disabled = true
    }
<
If this setting is a non-empty table each entry should be the name of a service
that Goldsmith should *not* configure. Current values for these services are 
'golines' and 'revive'.
>
    null = {
        disabled = { 'golines' }
    }
<
The above instructs Goldsmith to not configure the 'golines' service when
configuring null-ls.

*null.config*                                            *goldsmith-null.config*

Default: {}
Pass settings on to Goldsmith for null-ls. These settings would be just like what 
you'd pass to lspconfig. The value may be either a table or a function.

Much more on this setting is in |goldsmith-configuration| and at the wiki page:
https://github.com/WhoIsSethDaniel/goldsmith.nvim/wiki/Configurations

See |goldsmith-resources| for where `null-ls` can be found.

*gopls.config*                                          *goldsmith-gopls.config*

Default: {}
Pass settings on to Goldsmith for gopls. These settings would be just like what 
you'd pass to lspconfig. The value may be either a table or a function.

Much more on this setting is in |goldsmith-configuration| and at the wiki page:
https://github.com/WhoIsSethDaniel/goldsmith.nvim/wiki/Configurations

See |goldsmith-resources| for where `gopls` can be found.

To install `gopls` you can use |:GoInstallBinaries|.

HIGHLIGHTING AND CODE LENS           *goldsmith-highlighting-code-lens-settings*

*highlight.current_symbol*                  *goldsmith-highlight.current_symbol*

Default: true
Highlight the current symbol the cursor is over throughout the current document.

This setting can be changed from within Goldsmith by using |:GoSymHighlightOn|
and |:GoSymHighlightOff|.

*codelens.show*                                        *goldsmith-codelens.show*

Default: true
Show `codelens` items from `gopls`. When this is turned on *and* you have 
configured `gopls` to show various codelenses you will see, in-line via virtual
text, various code lenses. You can then use |:GoCodeLensRun| on the line
where the codelens appears to see the results of that codelens.

For details on what codelenses are available see the codelenses section of:
https://github.com/golang/tools/blob/master/gopls/doc/settings.md#ui

This setting can be changed from within Goldsmith by using |:GoCodeLensOn|
and |:GoCodeLensOff|.

TAG MANIPULATION                                    *goldsmith-tag-manipulation*

*tags.default_tag*                                  *goldsmith-tags.default_tag*

Default: json
When adding tags define what is the default tag if no tags are provided to 
|:GoAddTags|.

*tags.transform*                                      *goldsmith-tags.transform*

Default: snakecase
Apply the named transformation to the tag name. The available transformations are:
'snakecase', 'camelcase', 'lispcase', 'pascalcase', and 'keep'.

*tags.skip_unexported*                          *goldsmith-tags.skip_unexported*

Default: false
When applying tags skip any fields that are unexported.

TERMINAL SETTINGS                                  *goldsmith-terminal-settings*

Terminal settings are used by commands that have output that is displayed in a
terminal window.  Commands that have such output are |:GoBuild|, |:GoRun|, 
|:GoGet|, |:GoInstall|, and |:GoTest| (and possibly others).

*terminal.pos*                                          *goldsmith-terminal.pos*

Default: right
Position the terminal window will be placed at when a command with output is run.
An example of a command with output is :GoBuild. Valid values are "top", 
"bottom", "left", "right".

This sets this setting globally. You can also set it per-command.

*terminal.focus*                                      *goldsmith-terminal.focus*

Default: false
Whether or not the terminal window will have focus when a command with output is
run. If the window has focus at the time the command is run then this option has 
no effect. An example of a command with terminal output is :GoBuild.

This sets this setting globally. You can also set it per-command.

*terminal.width*                                      *goldsmith-terminal.width*

Default: 80
When using a pos that requires a vertical split this value represents the width 
of the terminal.

This sets this setting globally. You can also set it per-command.

*terminal.height*                                    *goldsmith-terminal.height*

Default: 20
When using a pos that requires a horizontal split this value represents the 
height of the terminal.

This sets this setting globally. You can also set it per-command.

WINDOW SETTINGS                                      *goldsmith-window-settings*

Window settings are used by commands that create a new non-terminal window.
Commands that have such output are |:GoAlt|, and |:GoDoc| (and possibly others).

*window.pos*                                          *goldsmith-window.pos*

Default: right
Position the window will be placed at when a new window is created. Valid
values are "top", "bottom", "left", "right".

This sets this setting globally. You can also set it per-command.

*window.focus*                                      *goldsmith-window.focus*

Default: false
Whether or not the new window will have focus after it is created. If the window 
has focus at the time the command is run then this option has no effect.

This sets this setting globally. You can also set it per-command.

*window.width*                                      *goldsmith-window.width*

Default: 80
When using a pos that requires a vertical split this value represents the width 
of the window.

This sets this setting globally. You can also set it per-command.

*window.height*                                    *goldsmith-window.height*

Default: 20
When using a pos that requires a horizontal split this value represents the 
height of the window.

This sets this setting globally. You can also set it per-command.

PER-COMMAND SETTINGS                            *goldsmith-settings-per-command*

Some settings may be applied per-command. 

For all commands that have terminal output (e.g. :GoBuild, :GoRun, etc...) you 
can define terminal options that are specific to that command and override any
global terminal options. The same applies to commands that use a non-terminal
window (e.g. :GoDoc, :GoHelp, etc...)

For example, if you want :GoBuild's terminal window to have the focus as it runs, 
but otherwise want all terminal commands to run without focus:
>
    {
        window  = {
            focus = true
        },
        terminal = {
            focus = false
        },
        gobuild = {
            focus = true
        }
    }
<

================================================================================
COMMANDS                                                    *goldsmith-commands*

                                                                        *:GoDoc*
:GoDoc [options] package [func | var | const | type]

View the documentation for the given package. Takes the same arguments as
`go doc`. e.g.:
>
    :GoDoc -all fmt
<
Use tab-completion to see all available packages.

View the documentation for a particular function/constant/variable/type within
a particular package:
>
    :GoDoc io Reader
<
Use tab-completion to see all available packages and then all available types/
functions/variables/constants within that package.

:GoDoc and :GoHelp share the same window. Settings for that window are controlled
via the godoc.* settings. See |goldsmith-settings-per-command| for more 
information.

                                                                        *:GoHelp*
:GoHelp topic

View the 'go help' documentation for the given topic, e.g.:
>
    :GoHelp test
<
Use tab-completion to see all available topics.

:GoDoc and :GoHelp share the same window. Settings for that window are controlled
via the godoc.* settings. See |goldsmith-settings-per-command| for more 
information.

                                                                    *:GoImports*
:GoImports

Manually request that `gopls` arrange and fix the import section of your code.

                                                                      *:GoBuild*
:GoBuild [args]

Run `go build` or `make` in the current working directory. 

Will use `make` if the project root directory contains a Makefile (or makefile).

When running `go build` it takes the same arguments as `go build`. e.g.:
>
    :GoBuild -race
<

                                                                        *:GoRun*
:GoRun [args]

Run `go run` in the current working directory. Takes the same arguments
as `go run`. e.g., the following runs the main package in the current directory:
>
    :GoRun .
<
                                                                        *:GoGet*
:GoGet [packages]

Run `go get` to add new libraries to use. Takes the same arguments as
`go get`.

                                                                    *:GoInstall*
:GoInstall [tools]

Run `go install` to add new tools to use. Takes the same arguments as
`go install`.

                                                                     *:GoFormat*
:GoFormat

Tell gopls and null-ls to format the current Go buffer immediately.

                                                                       *:GoTest*
:GoTest

Run `go test` in the current working directory. Takes the same arguments as
`go test`. 

                                                                    *:GoAddTags*
:[range]GoAddTags [key[,option]] [key[,option]] ...

Add tags and options to structs. By default will be applied to the struct the
cursor is in at the time the command is run. It will also work on a visually
selected set of lines, or on a given range. e.g.
>
    :10,20GoAddTags 
<
will add the default tag (typically `json`, but see |tags.default_tag|)
to all struct fields from line 10 to line 20.
>
    :GoAddTags json,omitempty
< 
will add the `json` tag along with the `omitempty` option to all fields in the
current struct.

Behind the scenes this uses the `gomodifytags` tool. See |goldsmith-resources|
for where this tool can be found.

To install `gomodifytags` you can use |:GoInstallBinaries|.

                                                                 *:GoRemoveTags*
:[range]GoRemoveTags [key[,option]] [key[,option]] ...

Remove tags and options from structs. By default will be applied to the struct 
the cursor is in at the time the command is run. It will also work on a visually
selected set of lines, or on a given range. e.g.
>
    :10,20GoRemoveTags 
<
will remove all tags from all struct fields from line 10 to line 20.
>
    :GoRemoveTags json,omitempty
<
will remove the `omitempty` option from all `json` tagged fields in the current 
struct.
>
    :GoRemoveTags json
<
will completely remove all `json` tags in the current struct. This:
>
    :GoRemoveTags
<
will remove all tags in the current struct or visual selection.

To remove all tags in the entire document:
>
    :%GoRemoveTags
<
Behind the scenes this uses the `gomodifytags` tool. See |goldsmith-resources|
for where this tool can be found.

To install `gomodifytags` you can use |:GoInstallBinaries|.

                                                                  *:GoClearTags*
:[range]GoClearTags

Clear all tags in the current struct or the given range. 

This is essentially an alias for |:GoRemoveTags| with no arguments.

Behind the scenes this uses the `gomodifytags` tool. See |goldsmith-resources|
for where this tool can be found.

                                                            *:GoInstallBinaries*
:GoInstallBinaries [tools]

Install many of the third-party tools that are needed by Goldsmith. By default 
all required tools are installed. If you supply [tools] only those tools that 
are specified will be installed. You can use tab-completion to select which
tools to install.

Running :GoInstallBinaries multiple times is fine. Each time it is run it will
attempt to build and install each tool, updating the tool, if needed.

                                                                   *:GoAddTests*
:GoAddTests [options]

Generate tests for all functions/methods in the current Go file. This does not
overwrite any tests that already exist, but it may make new stub tests. 

The only options are -p and -e. -p means generate parallel subtests. -e means
to only generate tests for exported functions/methods.

Behind the scenes this uses the `gotests` tool. See |goldsmith-resources| for
where this tool can be found.

To install `gotests` you can use |:GoInstallBinaries|.

                                                                    *:GoAddTest*
:GoAddTest [options] [function_name]

Generate a stub test for either the function/method passed to the command or 
generate a stub test for the current function/method the cursor is currently
in. If the given [function_name] does not exist no test is created.

The only option is -p. -p means generate parallel subtests.

You can use command completion to see all available functions in the current
file.

Behind the scenes this uses the `gotests` tool. See |goldsmith-resources| for
where this tool can be found.

To install `gotests` you can use |:GoInstallBinaries|.

                                                                        *:GoAlt*
:GoAlt[!]

Switch to the 'alternate' file for the current file. 

If you are editing a code file this will switch you to the test file for that 
code file. If you use '!' and the test file does not exist one will be created.

If you are editing a test file this will switch you to the code file for that
test file. If you use '!' and the code file does not exist one will be created. 

If a buffer for the 'alternate' file exists that buffer will be used. If a
window already exists with that buffer the window will be used. A new buffer
or window will be created if they do not already exist (contingent on the 
value of |goalt.use_current_window|).

                                                                       *:GoImpl*
:GoImpl <recv> <interface>

Create a stub implementation for the given <interface> using <recv> as the 
receiver. The stub implementation will be inserted on the lines directly
below the cursor.

To create a stub implementation for the io.Reader interface using 'f *File' 
as the receiver:
>
    :GoImpl f *File io.Reader
<
To create a stub implementation for the hash.Hash interface using Murmur as
the receiver:
>
    :GoImpl Murmur hash.Hash
<
You can use completion when attempting to specify the <interface>. The 
completion can help to find the appropriate package and the interfaces
within that package.

Behind the scenes this uses the `impl` tool. See |goldsmith-resources| for
where this tool can be found.

To install `impl` you can use |:GoInstallBinaries|.

                                                                 *:GoFixPlurals*
:GoFixPlurals

Check the current package for function and method signatures that have redundant 
parameter and result types and fix them. This operates on the current package,
and not the current file, so it is possible that un-opened files that are part 
of the current package will be modified.

Behind the scenes this uses the `fixplurals` tool. See |goldsmith-resources| for
where this tool can be found.

To install `fixplurals` you can use |:GoInstallBinaries|.

                                                                        *:GoDef*
:GoDef

Jump to the definition of the symbol under the cursor.

                                                                       *:GoInfo*
:GoInfo

Display information about the symbol under the cursor in a floating window.

                                                                    *:GoSigHelp*
:GoSigHelp

Display signature information about the symbol under the cursor in a floating 
window.

                                                                    *:GoDefType*
                                                                    *:GoTypeDef*
:GoDefType
:GoTypeDef

Jump to the definition of the type of the symbol under the cursor.

                                                                 *:GoCodeAction*
:GoCodeAction

Perform the code action for any code actions available on the current line.

                                                                        *:GoRef*
:GoRef

List all references to the symbol under the cursor in the quickfix window.

                                                                   *:GoShowDiag*
:GoShowDiag

Show all diagnostics for the current line in a floating window.

                                                                   *:GoListDiag*
:GoListDiag

Place all diagnostics for the current buffer in the location list.

                                                                     *:GoRename*
:GoRename name

Rename the symbol under the cursor to the name passed as an argument.

                                                               *:GoSymHighlight*
:GoSymHighlight

Highlight all references to the symbol under the cursor. This is a one-shot 
command. It does not toggle |highlight.current_symbol|.

                                                             *:GoSymHighlightOn*
:GoSymHighlightOn

This turns on symbol highlighting. It is the same as having the
|highlight.current_symbol| setting turned on. 

                                                            *:GoSymHighlightOff*
:GoSymHighlightOff

This turns off symbol highlighting. It is the same as having the
|highlight.current_symbol| setting turned off.

                                                                 *:GoCodeLensOn*
:GoCodeLensOn

Turn codelens information on. This turns on codelens information as virtual text
in your buffer(s). What is displayed is dependent on how `gopls` was configured.

For details on what codelenses are available see the codelenses section of:
https://github.com/golang/tools/blob/master/gopls/doc/settings.md#ui

See also |codelens.show|

                                                                 *:GoCodeLensOff*
:GoCodeLensOff

Turn codelens information off. This turns off codelens information for all 
buffers.

See also |codelens.show|

                                                                 *:GoCodeLensRun*
:GoCodeLensRun

Run the current codelens that is displaying on the current line.

                                                              *:GoCreateConfigs*
:GoCreateConfigs

This is meant as a convenience command to be used when first starting a project.
This command creates the recommended configuration files for all linters, 
formaatters, etc... that require a configuration file in the root directory of 
your project (Goldsmith assumes that the current working directory is the root 
of your project.)

After you have created the file(s) you can restart the server that is running 
the given services using the :LspRestart command. If you do not restart the 
server these services will never run.

Currently the only thing that requires a configuration file is `revive`. Without 
a configuration file `revive` will not work so a configuration file is mandatory 
for its proper functioning.

                                                     *goldsmith-module-commands*
MODULE RELATED COMMANDS

CodeLens commands are also available when editing the go.mod file.

The following commands are only available if you are editing a go.mod file.

                                                                   *:GoModCheck*
:GoModCheck

Check all required modules and inform the user if any can be upgraded. Any
modules that can be upgraded may be upgraded using a code action.

                                                                     *:GoModFmt*
:GoModFmt

Format the current go.mod file.

                                                                 *:GoModReplace*
:GoModReplace [module] replacement

Create a new 'replace' rule in the current go.mod file. 

If only the 'replacement' is given the module to replace it will be determined 
by the module that the cursor is currently sitting on. 

If [module] and 'replacement' are given then a 'replace' rule is created for
the given [module] using the 'replacement'

                                                                    *:GoModTidy*
:GoModTidy

Cleanup the go.mod file. See 'go help mod tidy' for more information on what
this does.

================================================================================
MAPPINGS                                                    *goldsmith-mappings*

Currently no mappings are defined.

================================================================================
TEXT OBJECTS                                            *goldsmith-text-objects*

Goldsmith defines a few text objects using the nvim-treesitter-textobjects 
plugin.

                                                 *goldsmith-v_af* *goldsmith-af*
af            "a function", select contents from a function definition to the
               closing bracket.

                ;                                *goldsmith-v_if* *goldsmith-if*
if            "inside a function", select contents of a function,
              excluding the function definition and the closing bracket. This
              text-object also supports literal functions

                                                 *goldsmith-v_ac* *goldsmith-ac*
ac            "a comment", select contents of the current comment block.

Goldsmith also defines the following text motion objects using the 
nvim-treesitter-textobjects plugin.

                                                                  *goldsmith-]]*
]]            Move forward to the next defined function.            

                                                                  *goldsmith-[[*
[[            Move backward to the previously defined function.

================================================================================
FUNCTIONS                                                  *goldsmith-functions*

Currently no functions are defined.

================================================================================
HEALTHCHECK                                              *goldsmith-healthcheck*

Goldsmith makes use of the Neovim |health| framework. You can run
>
	:checkhealth goldsmith
<
and get a best-effort attempt to find problems with your Go and Goldsmith setup.

================================================================================
HELP                                                            *goldsmith-help*       

There is a FAQ:
https://github.com/WhoIsSethDaniel/goldsmith.nvim/wiki/FAQ

If you have a question or think you have discovered a bug please feel to ask a 
question in the Github discussions area: 
https://github.com/WhoIsSethDaniel/goldsmith.nvim/discussions

If you have discovered a bug please report it:
https://github.com/WhoIsSethDaniel/goldsmith.nvim/issues

================================================================================
RESOURCES                                                  *goldsmith-resources*

This lists the locations for various plugins and tools required, or optionally 
used, by Goldsmith. See |:GoInstallBinaries| for one way to install many of the 
third-party tools. See |goldsmith-supported-plugins| for more information about
the plugins that can be utilized by Goldsmith.

* supported plugins:
  `nvim-lspconfig`                https://github.com/neovim/nvim-lspconfig
  `nvim-lspinstall`               https://github.com/kabouzeid/nvim-lspinstall
  `nvim-treesitter`               https://github.com/nvim-treesitter/nvim-treesitter
  `nvim-treesitter-textobjects`   https://github.com/nvim-treesitter/nvim-treesitter-textobjects
  `null-ls`                       https://github.com/jose-elias-alvarez/null-ls.nvim
  `vim-test`                      https://github.com/vim-test/vim-test
  `vim-ultest`                    https://github.com/rcarriga/vim-ultest

* 3rd-party tools
  `gopls`                         https://golang.org/x/tools/gopls
  `gomodifytags`                  https://github.com/fatih/gomodifytags
  `gotests`                       https://github.com/cweill/gotests
  `golines`                       https://github.com/segmentio/golines
  `impl`                          https://github.com/josharian/impl
  `fixplurals`                    https://github.com/davidrjenni/reftools/cmd/fixplurals
  `revive`                        https://github.com/mgechev/revive
