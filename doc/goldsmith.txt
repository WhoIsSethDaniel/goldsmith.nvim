*goldsmith.txt* Go development plugin for Neovim
*goldsmith*

WARNING: Goldsmith is still in very early stages and may not work as intended
>
                    __    __               _ __  __  
       ____ _____  / /___/ /________ ___  (_) /_/ /_ 
      / __ `/ __ \/ / __  / ___/ __ `__ \/ / __/ __ \
     / /_/ / /_/ / / /_/ (__  ) / / / / / / /_/ / / /
     \__, /\____/_/\__,_/____/_/ /_/ /_/_/\__/_/ /_/ 
    /____/

CONTENTS                                                    *goldsmith-contents*

  0. Intro........................................|goldsmith-intro|
  1. Requirements.................................|goldsmith-requirements|
  2. Features.....................................|goldsmith-features|
  3. Supported Plugins............................|goldsmith-supported-plugins|
  4. Configuration................................|goldsmith-configuration|
  5. Settings.....................................|goldsmith-settings|
  6. Commands.....................................|goldsmith-commands|
  7. Mappings.....................................|goldsmith-mappings|
  8. Text Objects.................................|goldsmith-text-objects|
  9. Functions....................................|goldsmith-functions|
 10. Health Check.................................|goldsmith-healthcheck|
 11. Resources....................................|goldsmith-resources|

================================================================================
INTRO                                                          *goldsmith-intro*

Goldsmith provides a Go development environment for Neovim using native Neovim 
features and Neovim plugins, where possible.

One goal is to support as many best-in-class plugins as possible. Support will 
include optional auto-configuration of these plugins to provide reasonable 
defaults for Go development.

Another goal is to take advantage of the many new features of Neovim 0.5.0.
Primarily this includes the built-in Language Server Protocol (LSP) client, 
and the integration of Tree-sitter.

================================================================================
REQUIREMENTS                                            *goldsmith-requirements*

Goldsmith requires at least Neovim 0.5.0. You can run `nvim --version` to see
what version of Neovim you have.

It also requires some plugins. See the |goldsmith-supported-plugins| section 
for more information about that.

You can run `:checkhealth goldsmith` to see if you meet all the requirements and
to see if you have anything missing. See |goldsmith-healthcheck| and 
|goldsmith-supported-plugins| for more information.


MINIMAL VERSIONS                                    *goldsmith-minimal-versions*

The following are the minmal versions known to work with Goldsmith. It does not
mean that older versions will not work, but it is unknown if they will.

Not every tool reports a version. If you install everything with 
|:GoInstallBinaries| it is expected that Goldsmith will work fine as long as 
your Go installation meets the minimum version requirement. You can check
the version of all tools using |goldsmith-healthcheck|.

Tool                      Version
---------------------------------
go                         1.14
gopls                      0.6.0
efm-langserver             0.0.34

================================================================================
FEATURES                                                    *goldsmith-features*

Features currently included:
* automatically run goimports on save
* treesitter navigation utilizing the nvim-treesitter-textobjects plugin
* treesitter text objects utilizing the nvim-treesitter-textobjects plugin
* view Go documentation using the :GoDoc command
* manually update imports using the :GoImport command
* format your code on demand using :GoFormat
* commands for common tasks (the following list is not complete):
    * build your project using :GoBuild 
    * run your main package using :GoRun
    * fetch new Go libraries using :GoGet
    * install new Go tools using :GoInstall
    * run tests using :GoTest
    * struct tag editing: add / remove / update struct tags and options.
* most commands are completely asynchronous
* use :checkhealth to see if your Goldsmith setup should work correctly

More features are coming. See the TODO list in the project README on github.
https://github.com/WhoIsSethDaniel/goldsmith.nvim/blob/main/README.md

================================================================================
SUPPORTED PLUGINS                                  *goldsmith-supported-plugins*

A list of plugins that are either required or optional, but all are supported
in some way by Goldsmith. See the |goldsmith-resources| section below for links
to each plugin mentioned.

Required
* nvim-lspconfig
  Configure gopls and efm-langserver
* nvim-treesitter
  For syntax highlighting, folding, and indentation

Optional
* nvim-treesitter-textobjects
  Needed if you want treesitter textobjects and treesitter navigation. See
  |goldsmith-text-objects|.
* nvim-lspinstall
  For installing language servers. i.e. gopls and efm-langserver
* vim-test
  For running tests
* vim-ultest
  For running tests, but fancier than vim-test

================================================================================
CONFIGURATION                                          *goldsmith-configuration*

You can use all the defaults by placing the following in your configuration:
>
    require("goldsmith.config").setup()
<

A configuration that sets all settings to the defaults:
>
    require("goldsmith.config").setup({
        godoc = {
            open_split = "vertical",
        },
        goimports = {
            run_on_save = true,
            timeout = 1000,
        },
        terminal = {
            pos = "right",
            focus = false,
        },
		tags  = {
			default_tag = "json",
			transform = "snakecase",
			skip_unexported = false
		}
    })
<

================================================================================
SETTINGS                                                    *goldsmith-settings*

*godoc.open_split*                                  *goldsmith-godoc.open_split*

Default: vertical
Orientation of the documentation split when you run :GoDoc. Valid values are 
"vertical" and "horizontal".

*goimports.run_on_save*                        *goldsmith-goimports.run_on_save*

Default: true
When you save Go program source have gopls run 'goimports' to arrange and fix 
the import section. It is a boolean value.

*goimports.timeout*                                *goldsmith-goimports.timeout*

Default: 1000
How long to wait for a response from gopls when requesting that goimports be 
run. The units are milliseconds, so 1000 = 1 second.

*terminal.pos*                                          *goldsmith-terminal.pos*

Default: right
Position the terminal window will be placed at when a command with output is run.
An example of a command with output is :GoBuild. Valid values are "top", 
"bottom", "left", "right".

This sets this setting globally. You can also set it per-command.

*terminal.focus*                                      *goldsmith-terminal.focus*

Default: false
Whether or not the terminal window will have focus when a command with output is
run. An example of a command with output is :GoBuild. It is a boolean value.

This sets this setting globally. You can also set it per-command.

*terminal.width*                                      *goldsmith-terminal.width*

When using a pos that requires a vertical split this value represents the width 
of the terminal.

This sets this setting globally. You can also set it per-command.

*terminal.height*                                    *goldsmith-terminal.height*

When using a pos that requires a horizontal split this value represents the 
height of the terminal.

This sets this setting globally. You can also set it per-command.

*tags.default_tag*                                  *goldsmith-tags.default_tag*

Default: json
When adding tags define what is the default tag if no tags are provided to 
|:GoAddTags|.

*tags.transform*                                      *goldsmith-tags.transform*

Default: snakecase
Apply the named transformation to the tag name. The available transformations are:
'snakecase', 'camelcase', 'lispcase', 'pascalcase', and 'keep'.

*tags.skip_unexported*                          *goldsmith-tags.skip_unexported*

Default: false
When applying tags skip any fields that are unexported. It is a boolean value.


PER-COMMAND SETTINGS                            *goldsmith-settings-per-command*

Some settings may be applied per-command. 

For all commands that have terminal output (e.g. :GoBuild, :GoRun, etc...) you 
can define terminal options that are specific to that command and override any
global terminal options.

For example, if you want :GoBuild's terminal window to have the focus as it runs, 
but otherwise want all commands to run without focus:
>
    {
        terminal = {
            focus = false
        },
        gobuild = {
            focus = true
        }
    }
<

================================================================================
COMMANDS                                                    *goldsmith-commands*

                                                                        *:GoDoc*
:GoDoc [package]

View the documentation for the given package. Takes the same arguments as
`go doc`. e.g.:
:GoDoc -all fmt

Use tab-completion to see all available documentation.

                                                                      *:GoBuild*
:GoBuild [args]

Run `go build` in the current working directory. Takes the same arguments
as `go build`. e.g.:
:GoBuild -race
  
                                                                        *:GoRun*
:GoRun [args]

Run `go run` in the current working directory. Takes the same arguments
as `go run`. e.g., the following runs the main package in the current directory:
:GoRun .
 
                                                                        *:GoGet*
:GoGet [packages]

Run `go get` to add new libraries to use. Takes the same arguments as
`go get`.

                                                                    *:GoInstall*
:GoInstall [tools]

Run `go install` to add new tools to use. Takes the same arguments as
`go install`.

                                                                     *:GoFormat*
:GoFormat

Tell gopls and efm-langserver to format the current Go buffer immediately.

                                                                       *:GoTest*
:GoTest

Run `go test` in the current working directory. Takes the same arguments as
`go test`. 

                                                                    *:GoAddTags*
:[range]GoAddTags [key[,option]] [key[,option]] ...

Add tags and options to structs. By default will be applied to the struct the
cursor is in at the time the command is run. It will also work on a visually
selected set of lines, or on a given range. e.g.
>
	:10,20GoAddTags 
<
will add the default tag (typically `json`, but see |goldsmith-tags.default_tag|)
to all struct fields from line 10 to line 20.
>
	:GoAddTags json,omitempty
< 
will add the `json` tag along with the `omitempty` option to all fields in the
current struct.

Behind the scenes this uses the `gomodifytags` tool. See |goldsmith-resources|
for where this tool can be found.

                                                                 *:GoRemoveTags*
:[range]GoRemoveTags [key[,option]] [key[,option]] ...

Remove tags and options from structs. By default will be applied to the struct 
the cursor is in at the time the command is run. It will also work on a visually
selected set of lines, or on a given range. e.g.
>
	:10,20GoRemoveTags 
<
will remove all tags from all struct fields from line 10 to line 20.
>
	:GoRemoveTags json,omitempty
<
will remove the `omitempty` option from all `json` tagged fields in the current 
struct.
>
	:GoRemoveTags json
<
will completely remove all `json` tags in the current struct. This:
>
  	:GoRemoveTags
<
will remove all tags in the current struct or visual selection.

To remove all tags in the entire document:
>
	:%GoRemoveTags
<
Behind the scenes this uses the `gomodifytags` tool. See |goldsmith-resources|
for where this tool can be found.

                                                                  *:GoClearTags*
:[range]GoClearTags

Clear all tags in the current struct or the given range. 

This is essentially an alias for |:GoRemoveTags| with no arguments.

Behind the scenes this uses the `gomodifytags` tool. See |goldsmith-resources|
for where this tool can be found.

                                                            *:GoInstallBinaries*
:GoInstallBinaries [packages]

Install many of the third-party tools that are needed by Goldsmith. By default 
all required tools are installed. If you supply [packages] only those packages 
that are specified will be installed. You can use tab-completion to select which
tools to install.

Running :GoInstallBinaries multiple times is fine. Each time it is run it will
attempt to build and install each tool, updating the tool, if needed.

================================================================================
MAPPINGS                                                    *goldsmith-mappings*

Currently no mappings are defined.

================================================================================
TEXT OBJECTS                                            *goldsmith-text-objects*

Goldsmith defines a few text objects using the nvim-treesitter-textobjects plugin.

                                               *goldsmith-v_af* *goldsmith-af*
af            "a function", select contents from a function definition to the
               closing bracket.

                                               *goldsmith-v_if* *goldsmith-if*
if            "inside a function", select contents of a function,
              excluding the function definition and the closing bracket. This
              text-object also supports literal functions

                                               *goldsmith-v_ac* *goldsmith-ac*
ac            "a comment", select contents of the current comment block.

Goldsmith also defines the following text motion objects using the 
nvim-treesitter-textobjects plugin.

                                                         *goldsmith-]]*
]]            Move forward to the next defined function.            

                                                         *goldsmith-[[*
[[            Move backward to the previously defined function.

================================================================================
FUNCTIONS                                                  *goldsmith-functions*

Currently no functions are defined.

================================================================================
HEALTHCHECK                                              *goldsmith-healthcheck*

Goldsmith makes use of the Neovim |health| framework. You can run
>
	:checkhealth goldsmith
<
and get a best-effort attempt to find problems with your Go and Goldsmith setup.

================================================================================
RESOURCES                                                  *goldsmith-resources*

This lists the locations for various plugins and tools required, or optionally 
used, by Goldsmith. See |:GoInstallBinaries| for one way to install many of the 
third-party tools. See |goldsmith-supported-plugins| for more information about
the plugins that can be utilized by Goldsmith.

* supported plugins:
  `nvim-lspconfig`                https://github.com/neovim/nvim-lspconfig
  `nvim-lspinstall`               https://github.com/kabouzeid/nvim-lspinstall
  `nvim-treesitter`               https://github.com/nvim-treesitter/nvim-treesitter
  `nvim-treesitter-textobjects`   https://github.com/nvim-treesitter/nvim-treesitter-textobjects
  `vim-test`                      https://github.com/vim-test/vim-test
  `vim-ultest`                    https://github.com/rcarriga/vim-ultest
* 3rd-party tools
  `gopls`                         golang.org/x/tools/gopls
  `efm-langserver`                github.com/mattn/efm-langserver
  `gomodifytags`                  https://github.com/fatih/gomodifytags
  `gotests`                       https://github.com/cweill/gotests/gotests",
  `golines`                       https://github.com/segmentio/golines",
